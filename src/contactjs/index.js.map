{"mappings":"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","sources":["src/input-consts.ts","src/geometry/Point.ts","src/geometry/Vector.ts","src/geometry/Geometry.ts","src/Pointer.ts","src/SinglePointerInput.ts","src/polyfills/event.ts","src/gestures/Gesture.ts","src/gestures/SinglePointerGesture.ts","src/gestures/Tap.ts","src/gestures/Press.ts","src/gestures/Pan.ts","src/DualPointerInput.ts","src/gestures/DualPointerGesture.ts","src/gestures/Pinch.ts","src/gestures/Rotate.ts","src/gestures/TwoFingerPan.ts","src/PointerManager.ts","src/PointerListener.ts"],"sourcesContent":["export enum Direction {\r\n  None = \"0\",\r\n  Left = \"left\",\r\n  Right = \"right\",\r\n  Up = \"up\",\r\n  Down = \"down\"\r\n}\r\n\r\nexport const Directions = Object.freeze({\r\n  Horizontal: [\r\n    Direction.Left,\r\n    Direction.Right\r\n  ],\r\n  Vertical: [\r\n    Direction.Up,\r\n    Direction.Down\r\n  ],\r\n  All: [\r\n    Direction.Left,\r\n    Direction.Right,\r\n    Direction.Up,\r\n    Direction.Down,\r\n    Direction.None,\r\n  ]\r\n});\r\n\r\nexport enum GestureState {\r\n  Inactive = \"inactive\",\r\n  Active = \"active\",\r\n  Blocked = \"blocked\"\r\n}\r\n\r\nexport enum PointerManagerState {\r\n  NoPointer = \"nopointer\",\r\n  SinglePointer = \"singlepointer\",\r\n  DualPointer = \"dualpointer\",\r\n}\r\n\r\nexport enum PointerListenerState {\r\n  NoActiveGesture = \"noactivegesture\",\r\n  ActiveGesture = \"activegesture\",\r\n}","export class Point {\r\n    public readonly x: number;\r\n    public readonly y: number;\r\n\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","import { Point } from \"./Point\";\r\nimport { Direction } from \"../input-consts\";\r\n\r\n/*\r\n* important notice regarding the coordinate system on the screen:\r\n* - origin is the top-left corner\r\n* - downards from the origin on the y-axis are positive values\r\n*/\r\nexport class Vector {\r\n  public readonly vectorLength: number;\r\n\r\n  public readonly startPoint: Point;\r\n  public readonly endPoint: Point;\r\n\r\n  public readonly direction: Direction;\r\n\r\n  public readonly deltaX: number;\r\n  public readonly deltaY: number;\r\n\r\n  public readonly x: number;\r\n  public readonly y: number;\r\n\r\n  // vector between 2 points: START(x,y) and END(x,y)\r\n  public constructor(startPoint: Point, endPoint: Point) {\r\n    this.startPoint = startPoint;\r\n    this.endPoint = endPoint;\r\n\r\n    this.direction = Direction.None;\r\n\r\n    this.deltaX = this.endPoint.x - this.startPoint.x;\r\n    this.deltaY = this.endPoint.y - this.startPoint.y;\r\n\r\n    this.x = this.deltaX;\r\n    this.y = this.deltaY;\r\n\r\n    // determine length\r\n    this.vectorLength = Math.sqrt(\r\n      Math.pow(this.deltaX, 2) + Math.pow(this.deltaY, 2)\r\n    );\r\n\r\n    // determine direction\r\n    if (Math.abs(this.deltaX) > Math.abs(this.deltaY)) {\r\n      // left or right\r\n      if (this.startPoint.x < this.endPoint.x) {\r\n        this.direction = Direction.Right;\r\n      } else if (this.startPoint.x > this.endPoint.x) {\r\n        this.direction = Direction.Left;\r\n      }\r\n    } else {\r\n      // up or down\r\n      if (this.startPoint.y < this.endPoint.y) {\r\n        this.direction = Direction.Down;\r\n      } else if (this.startPoint.y > this.endPoint.y) {\r\n        this.direction = Direction.Up;\r\n      }\r\n    }\r\n  }\r\n}","import { Point } from \"./Point\";\r\nimport { Vector } from \"./Vector\";\r\n\r\nexport class Geometry {\r\n\r\n  static getVector(startPointerEvent: PointerEvent, endPointerEvent: PointerEvent): Vector {\r\n\r\n    const startPoint = new Point(\r\n      startPointerEvent.clientX,\r\n      startPointerEvent.clientY\r\n    );\r\n\r\n    const endPoint = new Point(\r\n      endPointerEvent.clientX,\r\n      endPointerEvent.clientY\r\n    );\r\n\r\n    const vector = new Vector(startPoint, endPoint);\r\n\r\n    return vector;\r\n  }\r\n\r\n  // update speed. speed = distance / time\r\n  static getSpeed(vector: Vector, startTimestamp: number, endTimestamp: number): number {\r\n\r\n    let speed = 0;\r\n\r\n    const timespan_ms = endTimestamp - startTimestamp;\r\n    const timespan_s = timespan_ms / 1000;\r\n\r\n    if (vector != null && timespan_s != 0) {\r\n      // px/s\r\n      speed = vector.vectorLength / timespan_s;\r\n    }\r\n\r\n    return speed;\r\n  }\r\n\r\n  /*\r\n  * CALCULATE ROTATION\r\n  * this is not a trivial problem\r\n  * required output is: angle and direction (cw //ccw)\r\n  * direction is relative to the first touch with two fingers, not absolute to the screens default coordinate system\r\n  * to determine rotation direction, 3 points on the circle - with timestamps - are required\r\n  * imagine a steering wheel\r\n  * - initial state is 0 deg (0)\r\n  * - if the wheel has been turned ccw, its state has a negative angle\r\n  * - if the wheel has been turned cw, its state has a positive angle\r\n  * - possible values for the angle: [-360,360]\r\n  */\r\n  static calculateRotationAngle(vector_1: Vector, vector_2: Vector): number {\r\n    // vector_ are vectors between 2 points in time, same finger\r\n    // angleAector_ are vectors between 2 fingers\r\n    const angleVector_1 = new Vector(vector_1.startPoint, vector_2.startPoint); // in time: occured first\r\n    const angleVector_2 = new Vector(vector_1.endPoint, vector_2.endPoint); // in time: occured second\r\n\r\n    const origin = new Point(0, 0);\r\n\r\n    // translate the points of the vector, so that their startPoints are attached to (0,0)\r\n    /*\r\n\r\n          ^\r\n         /\r\n        /\r\n         /\r\n        x\r\n        0\r\n\r\n    */\r\n    const translationVector_1 = new Vector(angleVector_1.startPoint, origin);\r\n    const translatedEndPoint_1 = this.translatePoint(\r\n      angleVector_1.endPoint,\r\n      translationVector_1\r\n    );\r\n\r\n    //var v_1_translated = new Vector(origin, translatedEndPoint_1);\r\n\r\n    const translationVector_2 = new Vector(angleVector_2.startPoint, origin);\r\n    const translatedEndPoint_2 = this.translatePoint(\r\n      angleVector_2.endPoint,\r\n      translationVector_2\r\n    );\r\n\r\n    //var v2_translated = new Vector(origin, translatedEndPoint_2);\r\n\r\n    // rotate the first angle vector so its y-coordinate becomes 0\r\n    /*\r\n\r\n      x------->\r\n      0\r\n\r\n    */\r\n    const rotationAngle = this.calcAngleRad(translatedEndPoint_1) * -1;\r\n\r\n    // rottation matrix\r\n    //var x_1_rotated =  ( translatedEndPoint_1.x * Math.cos(rotationAngle) ) - ( translatedEndPoint_1.y * Math.sin(rotationAngle) );\r\n    //var y_1_rotated = Math.round(( translatedEndPoint_1.x * Math.sin(rotationAngle) ) + ( translatedEndPoint_1.y * Math.cos(rotationAngle) )); // should be 0\r\n\r\n    //var v_1_rotated = new Vector(origin, new Point(x_1_rotated, y_1_rotated));\r\n\r\n    // rotate the second vector (in time: after 1st)\r\n    const x_2_rotated =\r\n      translatedEndPoint_2.x * Math.cos(rotationAngle) -\r\n      translatedEndPoint_2.y * Math.sin(rotationAngle);\r\n    const y_2_rotated = Math.round(\r\n      translatedEndPoint_2.x * Math.sin(rotationAngle) +\r\n      translatedEndPoint_2.y * Math.cos(rotationAngle)\r\n    );\r\n\r\n    //var v_2_rotated = new Vector(origin, new Point(x_2_rotated, y_2_rotated));\r\n\r\n    // calculate the angle between v_1 and v_2\r\n\r\n    const angleDeg = (Math.atan2(y_2_rotated, x_2_rotated) * 180) / Math.PI;\r\n\r\n    return angleDeg;\r\n  }\r\n\r\n  static calculateVectorAngle(vector_1: Vector, vector_2: Vector): number {\r\n    let angleDeg = 0;\r\n\r\n    if (vector_1.vectorLength > 0 && vector_2.vectorLength > 0) {\r\n      const cos =\r\n        (vector_1.x * vector_2.x + vector_1.y * vector_2.y) /\r\n        (vector_1.vectorLength * vector_2.vectorLength);\r\n\r\n      const angleRad = Math.acos(cos);\r\n      angleDeg = this.rad2deg(angleRad);\r\n    }\r\n\r\n    return angleDeg;\r\n  }\r\n\r\n  static translatePoint(point: Point, vector: Vector): Point {\r\n    const newX = point.x + vector.x;\r\n    const newY = point.y + vector.y;\r\n\r\n    const translatedPoint = new Point(newX, newY);\r\n    return translatedPoint;\r\n  }\r\n\r\n  // return the counter-clockwise angle between the positive x-axis and a point.\r\n  // from 0 degrees to 360 degrees\r\n  // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\r\n  static calcAngleDegrees(point: Point): number {\r\n    // angle in degrees between -180 and 180\r\n    let angle = (Math.atan2(point.y, point.x) * 180) / Math.PI;\r\n\r\n    if (angle < 0) {\r\n      angle = 360 + angle;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  static calcAngleRad(point: Point): number {\r\n    let angle = Math.atan2(point.y, point.x); // [-PI, PI]\r\n\r\n    if (angle < 0) {\r\n      angle = 2 * Math.PI + angle;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n\r\n  static deg2rad(angleDeg: number): number {\r\n    const rad = (Math.PI / 180) * angleDeg;\r\n    return rad;\r\n  }\r\n\r\n  static rad2deg(angleRad: number): number {\r\n    const deg = angleRad / (Math.PI / 180);\r\n    return deg;\r\n  }\r\n\r\n  // DualPointerInput calculations\r\n  // center between start points\r\n\r\n  static getCenter(pointA: Point, pointB: Point): Point {\r\n    const centerX = (pointA.x + pointB.x) / 2;\r\n    const centerY = (pointA.y + pointB.y) / 2;\r\n\r\n    const center = new Point(centerX, centerY);\r\n    return center;\r\n  }\r\n\r\n  static getCenterMovementVector(vector_1: Vector, vector_2: Vector): Vector {\r\n\r\n    // start point is the center between the starting points of the 2 vectors\r\n    const startPoint = this.getCenter(vector_1.startPoint, vector_2.startPoint);\r\n\r\n    // center between the end points of the vectors\r\n    const endPoint = this.getCenter(vector_1.endPoint, vector_2.endPoint);\r\n\r\n    const vectorBetweenCenterPoints = new Vector(startPoint, endPoint);\r\n\r\n    return vectorBetweenCenterPoints;\r\n  }\r\n\r\n  static calculateDistanceChange(vector_1: Vector, vector_2: Vector): number {\r\n    const vectorBetweenStartPoints = new Vector(\r\n      vector_1.startPoint,\r\n      vector_2.startPoint\r\n    );\r\n    const vectorBetweenEndPoints = new Vector(\r\n      vector_1.endPoint,\r\n      vector_2.endPoint\r\n    );\r\n\r\n    const distanceChange =\r\n      vectorBetweenEndPoints.vectorLength -\r\n      vectorBetweenStartPoints.vectorLength;\r\n\r\n    return distanceChange;\r\n  }\r\n\r\n  static calculateAbsoluteDistanceChange(vector_1: Vector, vector_2: Vector): number {\r\n\r\n    const distanceChange = this.calculateDistanceChange(vector_1, vector_2);\r\n\r\n    const absoluteDistanceChange = Math.abs(distanceChange);\r\n\r\n    return absoluteDistanceChange;\r\n  }\r\n\r\n  static calculateRelativeDistanceChange(vector_1: Vector, vector_2: Vector): number {\r\n\r\n    const vectorBetweenStartPoints = new Vector(\r\n      vector_1.startPoint,\r\n      vector_2.startPoint\r\n    );\r\n    const vectorBetweenEndPoints = new Vector(\r\n      vector_1.endPoint,\r\n      vector_2.endPoint\r\n    );\r\n\r\n    const relativeDistanceChange =\r\n      vectorBetweenEndPoints.vectorLength /\r\n      vectorBetweenStartPoints.vectorLength;\r\n\r\n    return relativeDistanceChange;\r\n  }\r\n\r\n}","import { Geometry } from \"./geometry/Geometry\";\r\nimport {\r\n  PointerGlobalParameters,\r\n  PointerLiveParameters,\r\n  PointerParameters,\r\n} from \"./interfaces\";\r\n\r\n/*********************************************************************************************************************\r\n  PointerInput\r\n\r\n  - contains data about one single finger / pointer\r\n  - there are \"live\" parameters and \"global\" parameters\r\n  - \"live\" parameters are caluclated using liveTimespan\r\n  - \"global\" parameters are calculated using the whole timespan of this pointerdown\r\n  - the current vector. The vector should be calculated \"live\" and not over the whole pointerdown duration.\r\n  The user expects the pointer input to be in sync with his current finger movement on the screen,\r\n  not with something a second ago.\r\n  - start and end coordinates\r\n  - start and end timestamps\r\n  - speeds and distances\r\n********************************************************************************************************************/\r\n\r\ninterface PointerOptions {\r\n  DEBUG: boolean;\r\n  vectorTimespan?: number;\r\n}\r\n\r\nexport enum PointerState {\r\n  Active = \"active\", // on the surface\r\n  Removed = \"removed\", // removed from surface\r\n  Canceled = \"canceled\",\r\n}\r\n\r\n\r\nexport class Pointer {\r\n  readonly options: PointerOptions;\r\n  DEBUG: boolean;\r\n  vectorTimespan: number;\r\n\r\n  readonly pointerId: number;\r\n\r\n  readonly parameters: PointerParameters;\r\n\r\n  readonly initialPointerEvent: PointerEvent;\r\n  currentPointerEvent: PointerEvent;\r\n  recognizedEvents: PointerEvent[];\r\n\r\n  state: PointerState;\r\n\r\n  constructor(pointerEvent: PointerEvent, options?: PointerOptions) {\r\n\r\n    this.options = {\r\n      DEBUG: false,\r\n      ...options,\r\n    };\r\n\r\n    this.DEBUG = this.options.DEBUG;\r\n\r\n    const now = new Date().getTime();\r\n\r\n    this.pointerId = pointerEvent.pointerId;\r\n    this.vectorTimespan = this.options.vectorTimespan ?? 100; // milliseconds\r\n\r\n    this.initialPointerEvent = pointerEvent;\r\n    this.currentPointerEvent = pointerEvent;\r\n    this.recognizedEvents = [pointerEvent];\r\n\r\n    this.state = PointerState.Active;\r\n\r\n    const nullVector = Geometry.getVector(pointerEvent, pointerEvent);\r\n\r\n    const globalParameters: PointerGlobalParameters = {\r\n      startX: this.initialPointerEvent.clientX,\r\n      startY: this.initialPointerEvent.clientY,\r\n      vector: nullVector,\r\n      deltaX: 0,\r\n      deltaY: 0,\r\n      startTimestampUTC: now,\r\n      startTimestamp: this.initialPointerEvent.timeStamp, // unfortunately, FF (linux) does not provide UTC, but elapsed time since the window Object was created\r\n      currentTimestamp: this.initialPointerEvent.timeStamp,\r\n      endTimestamp: null,\r\n      maximumSpeed: 0,\r\n      currentSpeed: 0,\r\n      distance: 0,\r\n      maximumDistance: 0,\r\n      averageSpeed: 0,\r\n      finalSpeed: 0,\r\n      traveledDistance: 0,\r\n      hasBeenMoved: false,\r\n      duration: 0,\r\n    };\r\n\r\n    const liveParameters: PointerLiveParameters = {\r\n      duration: 0, // ms\r\n      speed: 0,\r\n      vector: nullVector,\r\n      distance: 0,\r\n      isMoving: false,\r\n    };\r\n\r\n    const parameters: PointerParameters = {\r\n      global: globalParameters,\r\n      live: liveParameters,\r\n    };\r\n\r\n    this.parameters = parameters;\r\n\r\n  }\r\n\r\n  getTarget(): EventTarget | null {\r\n    return this.initialPointerEvent.target;\r\n  }\r\n\r\n  reset(): void {\r\n\r\n  }\r\n\r\n  onIdle(): void {\r\n    const now = new Date().getTime();\r\n\r\n    // currentTimestamp is not an UTC millisecond timestamp.\r\n    // this.globalParameters.currentTimestamp = now;\r\n\r\n    const duration = now - this.parameters.global.startTimestampUTC;\r\n    this.parameters.global.duration = duration;\r\n  }\r\n\r\n  onPointerMove(pointermoveEvent: PointerEvent): void {\r\n\r\n    this.parameters.global.hasBeenMoved = true;\r\n    this.parameters.live.isMoving = true;\r\n\r\n    this.update(pointermoveEvent);\r\n  }\r\n\r\n  onPointerUp(pointerupEvent: PointerEvent): void {\r\n    this.parameters.global.finalSpeed = this.parameters.live.speed;\r\n\r\n    this.parameters.live.speed = 0;\r\n\r\n    this.parameters.live.isMoving = false;\r\n    this.state = PointerState.Removed;\r\n\r\n    this.parameters.global.endTimestamp = pointerupEvent.timeStamp;\r\n\r\n    this.update(pointerupEvent);\r\n\r\n    if (this.DEBUG === true) {\r\n      console.log(\r\n        `[PointerInput] pointerdown ended. pointerdown duration: ${this.parameters.global.duration}ms`\r\n      );\r\n    }\r\n  }\r\n\r\n  onPointerLeave(pointerleaveEvent: PointerEvent): void {\r\n    this.onPointerUp(pointerleaveEvent);\r\n  }\r\n\r\n  onPointerCancel(pointercancelEvent: PointerEvent): void {\r\n    this.update(pointercancelEvent);\r\n\r\n    this.parameters.live.speed = 0;\r\n\r\n    this.state = PointerState.Canceled;\r\n\r\n    this.parameters.live.isMoving = false;\r\n\r\n    this.parameters.global.endTimestamp = pointercancelEvent.timeStamp;\r\n\r\n    if (this.DEBUG === true) {\r\n      console.log(`[PointerInput] canceled, pointerdown duration:${this.parameters.global.duration}ms`);\r\n    }\r\n  }\r\n\r\n  update(pointerEvent: PointerEvent): void {\r\n    // update general parameters\r\n    this.currentPointerEvent = pointerEvent;\r\n    this.recognizedEvents.push(pointerEvent);\r\n\r\n    // update liveParameters\r\n    // maybe check if clientX and clientY are present\r\n\r\n    const timedPointerEvents = this.getTimedPointerEvents();\r\n\r\n    const liveVector = Geometry.getVector(\r\n      timedPointerEvents[0],\r\n      timedPointerEvents[1]\r\n    );\r\n\r\n    this.parameters.live.vector = liveVector;\r\n    this.parameters.live.distance = liveVector.vectorLength;\r\n\r\n    this.parameters.live.speed = Geometry.getSpeed(\r\n      liveVector,\r\n      timedPointerEvents[0].timeStamp,\r\n      timedPointerEvents[1].timeStamp\r\n    );\r\n\r\n    // update global parameters\r\n    if (this.parameters.live.speed > this.parameters.global.maximumSpeed) {\r\n      this.parameters.global.maximumSpeed = this.parameters.live.speed;\r\n    }\r\n    this.parameters.global.currentTimestamp = pointerEvent.timeStamp;\r\n    this.parameters.global.duration = pointerEvent.timeStamp - this.parameters.global.startTimestamp;\r\n\r\n    this.parameters.global.deltaX = liveVector.endPoint.x - this.parameters.global.startX;\r\n    this.parameters.global.deltaY = liveVector.endPoint.y - this.parameters.global.startY;\r\n\r\n    const globalVector = Geometry.getVector(\r\n      this.initialPointerEvent,\r\n      this.currentPointerEvent\r\n    );\r\n    this.parameters.global.vector = globalVector;\r\n\r\n    this.parameters.global.distance = globalVector.vectorLength;\r\n    if (globalVector.vectorLength > this.parameters.global.maximumDistance) {\r\n      this.parameters.global.maximumDistance = globalVector.vectorLength;\r\n    }\r\n\r\n    if (this.DEBUG === true) {\r\n      console.log(\r\n        `[PointerInput] current speed: ${this.parameters.live.speed}px/s`\r\n      );\r\n      console.log(\r\n        `[PointerInput] pointerdown duration: ${this.parameters.global.duration}ms`\r\n      );\r\n\r\n      console.log(\r\n        `[PointerInput] live vector length within vectorTimespan: ${this.parameters.live.vector.vectorLength}px`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  /*\r\n   * Get the two events which are necessary for vector calculation. This is based on this.vectorTimespan.\r\n   * vectorTimespan defines the timespan which actually defines the \"live\" vector\r\n   */\r\n  private getTimedPointerEvents(): PointerEvent[] {\r\n    // if the duration is lower than the vectorTimespan, startPointerEvent would be null\r\n    // if so, use this.initialPointerEvent as a fallback\r\n    let startPointerEvent = this.initialPointerEvent;\r\n    const endPointerEvent =\r\n      this.recognizedEvents[this.recognizedEvents.length - 1];\r\n\r\n    let startIndex = this.recognizedEvents.length - 1;\r\n\r\n    let elapsedTime = 0;\r\n    const endTimeStamp = endPointerEvent.timeStamp;\r\n\r\n    while (elapsedTime < this.vectorTimespan) {\r\n      startIndex = startIndex - 1;\r\n\r\n      if (startIndex < 0) {\r\n        break;\r\n      }\r\n\r\n      startPointerEvent = this.recognizedEvents[startIndex];\r\n\r\n      elapsedTime = endTimeStamp - startPointerEvent.timeStamp;\r\n    }\r\n\r\n    const pointerEvents = [startPointerEvent, endPointerEvent];\r\n\r\n    this.recognizedEvents = this.recognizedEvents.slice(-20);\r\n\r\n    return pointerEvents;\r\n  }\r\n\r\n}","import { Pointer } from \"./Pointer\";\r\nimport { PointerParameters } from \"./interfaces\";\r\n\r\nexport class SinglePointerInput {\r\n\r\n  pointer: Pointer;\r\n  readonly parameters: PointerParameters;\r\n\r\n  constructor(pointer: Pointer) {\r\n    this.pointer = pointer;\r\n    this.parameters = pointer.parameters;\r\n  }\r\n\r\n  getTarget(): EventTarget | null {\r\n    return this.pointer.initialPointerEvent.target;\r\n  }\r\n\r\n  getCurrentPointerEvent(): PointerEvent {\r\n    return this.pointer.currentPointerEvent;\r\n  }\r\n\r\n  // string is not good, it should be Direction\r\n  getCurrentDirection() : string {\r\n    return this.parameters.live.vector.direction;\r\n  }\r\n\r\n  onIdle(): void { }\r\n\r\n  onPointerMove(pointermoveEvent: PointerEvent): void { }\r\n\r\n  onPointerUp(pointerupEvent: PointerEvent): void { }\r\n\r\n  onPointerLeave(pointerleaveEvent: PointerEvent): void { }\r\n\r\n  onPointerCancel(pointercancelEvent: PointerEvent): void { }\r\n}","const window = globalThis[\"window\"];\r\n\r\nexport let CustomEvent: typeof globalThis.CustomEvent;\r\n\r\nif (window?.CustomEvent) {\r\n    // If we're in a browser environment forward the existing CustomEvent ctor\r\n    CustomEvent = window.CustomEvent;\r\n} else {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    CustomEvent = class _<T = any> extends Event implements globalThis.CustomEvent<T> {\r\n        public detail: T;\r\n\r\n        public constructor(type: string, eventInitDict?: CustomEventInit<T> | undefined) {\r\n            super(type, eventInitDict);\r\n            this.detail = eventInitDict?.detail as T;\r\n        }\r\n\r\n        public initCustomEvent(): never {\r\n            throw new Error(\"Unsupported deprecated method\");\r\n        }\r\n    };\r\n}\r\n","import { PointerManager } from \"../PointerManager\";\r\nimport { SinglePointerInput } from \"../SinglePointerInput\";\r\nimport { DualPointerInput } from \"../DualPointerInput\";\r\nimport { Pointer } from \"../Pointer\";\r\nimport { Point } from \"../geometry/Point\";\r\nimport { Vector } from \"../geometry/Vector\";\r\n\r\nimport {\r\n  TimedParameters,\r\n  TimedMinMaxParameters,\r\n  SinglePointerGestureParameters,\r\n  DualPointerGestureParameters,\r\n} from \"../interfaces\";\r\n\r\nimport {\r\n  GestureState,\r\n  PointerManagerState,\r\n  Direction,\r\n} from \"../input-consts\";\r\n\r\nimport { CustomEvent } from \"../polyfills/event\";\r\n\r\ntype GestureParameterValue = number | boolean | null | Vector;\r\n\r\ntype SinglePointerInputConstructor = new (...args: ConstructorParameters<typeof SinglePointerInput>) => SinglePointerInput;\r\ntype DualPointerInputConstructor = new (...args: ConstructorParameters<typeof DualPointerInput>) => DualPointerInput;\r\n\r\nexport class GestureEvent extends CustomEvent<GestureEventData> {\r\n}\r\n\r\nexport interface GestureOptions {\r\n  DEBUG: boolean;\r\n  blocks: Gesture[];\r\n  bubbles: boolean;\r\n  supportedDirections: string[];\r\n  supportedButtons: number[];\r\n}\r\n\r\nexport interface GlobalGestureEventData {\r\n  deltaX: number;\r\n  deltaY: number;\r\n  distance: number;\r\n  speedX: number;\r\n  speedY: number;\r\n  speed: number;\r\n  direction: Direction;\r\n  scale: number;\r\n  rotation: number;\r\n  center: Point;\r\n  srcEvent: PointerEvent;\r\n}\r\n\r\nexport interface LiveGestureEventData {\r\n  deltaX: number;\r\n  deltaY: number;\r\n  distance: number;\r\n  speedX: number;\r\n  speedY: number;\r\n  speed: number;\r\n  direction: Direction;\r\n  scale: number;\r\n  rotation: number;\r\n  center: Point;\r\n  srcEvent: PointerEvent;\r\n}\r\n\r\nexport interface GestureEventData extends TimedParameters {\r\n  recognizer: Gesture,\r\n  global: GlobalGestureEventData,\r\n  live: LiveGestureEventData,\r\n  pointerManager: PointerManager,\r\n}\r\n\r\nexport abstract class Gesture {\r\n\r\n  validPointerManagerState: PointerManagerState | null;\r\n  validPointerInputConstructor: SinglePointerInputConstructor | DualPointerInputConstructor;\r\n\r\n  options: GestureOptions;\r\n  DEBUG: boolean;\r\n\r\n  eventBaseName!: string;\r\n\r\n  readonly domElement: HTMLElement;\r\n\r\n  initialPointerEvent: PointerEvent | null;\r\n\r\n  initialParameters: SinglePointerGestureParameters | DualPointerGestureParameters | null;\r\n  activeStateParameters: SinglePointerGestureParameters | DualPointerGestureParameters | null;\r\n\r\n  state: GestureState;\r\n\r\n  constructor(domElement: HTMLElement, options?: Partial<GestureOptions>) {\r\n\r\n    this.state = GestureState.Inactive;\r\n\r\n    this.validPointerManagerState = null;\r\n    this.validPointerInputConstructor = SinglePointerInput;\r\n\r\n    this.domElement = domElement;\r\n\r\n    this.initialPointerEvent = null;\r\n\r\n    this.initialParameters = null;\r\n    this.activeStateParameters = null;\r\n\r\n    this.options = {\r\n      bubbles: true,\r\n      blocks: [],\r\n      supportedDirections: [],\r\n      supportedButtons: [],\r\n      DEBUG: false,\r\n      ...options\r\n    };\r\n\r\n    this.DEBUG = this.options.DEBUG;\r\n\r\n  }\r\n\r\n  getEmptyGestureParameters(): TimedMinMaxParameters {\r\n    const nullRecognitionParameters: TimedMinMaxParameters = {\r\n      global: {\r\n        min: {},\r\n        max: {},\r\n        boolean: {},\r\n      },\r\n\r\n      live: {\r\n        min: {},\r\n        max: {},\r\n        boolean: {},\r\n      }\r\n    };\r\n\r\n    return nullRecognitionParameters;\r\n  }\r\n\r\n  getGestureParameters(): SinglePointerGestureParameters | DualPointerGestureParameters {\r\n    let gestureParameters;\r\n\r\n    if (this.state == GestureState.Active) {\r\n      gestureParameters = this.activeStateParameters;\r\n      if (this.DEBUG == true) {\r\n        console.log(\r\n          `[${this.eventBaseName}] validating using activeStateParameters`\r\n        );\r\n        console.log(gestureParameters);\r\n      }\r\n    } else {\r\n      if (this.DEBUG == true) {\r\n        console.log(\r\n          `[${this.eventBaseName}] validating using initialParameters`\r\n        );\r\n      }\r\n      gestureParameters = this.initialParameters;\r\n    }\r\n\r\n    if (gestureParameters == null) {\r\n      throw new Error(\"[Gesture] no gesture parameters found. Do not call .getGestureParameters on abstract class Gesture\");\r\n    }\r\n\r\n    return gestureParameters;\r\n  }\r\n\r\n  validateGestureParameters(pointerInput: SinglePointerInput | DualPointerInput): boolean {\r\n\r\n    const gestureParameters = this.getGestureParameters();\r\n\r\n    let isValid = true;\r\n    let timespan: keyof typeof gestureParameters;\r\n    for (timespan in gestureParameters) {\r\n\r\n      const timedGestureParameters = gestureParameters[timespan];\r\n      const timedPointerInputValues = pointerInput.parameters[timespan] as Record<string, any>;\r\n\r\n      let minOrMaxOrBoolean: keyof typeof timedGestureParameters;\r\n\r\n      for (minOrMaxOrBoolean in timedGestureParameters) {\r\n        const evaluationParameters = timedGestureParameters[minOrMaxOrBoolean] as Record<string, GestureParameterValue>;\r\n        let gestureParameterName: string;\r\n        for (gestureParameterName in evaluationParameters) {\r\n          const gestureParameter = evaluationParameters[gestureParameterName];\r\n\r\n          const pointerInputValue = timedPointerInputValues[gestureParameterName];\r\n\r\n          if (this.DEBUG == true) {\r\n            console.log(\r\n              `[${this.eventBaseName}] validating ${timespan} ${minOrMaxOrBoolean}: required: ${gestureParameter}, pointer: ${pointerInputValue}`\r\n            );\r\n          }\r\n\r\n          if (typeof gestureParameter == \"boolean\" && typeof pointerInputValue == \"boolean\") {\r\n            isValid = this.validateBooleanParameter(gestureParameter, pointerInputValue);\r\n          }\r\n          else if (typeof gestureParameter == \"number\" && typeof pointerInputValue == \"number\") {\r\n            isValid = this.validateMinMaxParameter(gestureParameter, pointerInputValue, minOrMaxOrBoolean);\r\n          }\r\n\r\n          if (isValid == false) {\r\n            if (this.DEBUG == true) {\r\n              console.log(`[${this.eventBaseName}] invalidated `);\r\n            }\r\n            return false;\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  validateBooleanParameter(gestureParameter: boolean, pointerInputValue: boolean): boolean {\r\n    if (gestureParameter == null) {\r\n      return true;\r\n    } else if (gestureParameter == pointerInputValue) {\r\n\r\n      if (this.DEBUG == true) {\r\n        console.log(\r\n          `validated: required value: ${gestureParameter}, current value: ${pointerInputValue}`\r\n        );\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(\r\n        `dismissing ${this.eventBaseName}: required value: ${gestureParameter}, current value: ${pointerInputValue}`\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  validateMinMaxParameter(gestureParameter: number, pointerInputValue: number, minOrMax: string): boolean {\r\n    if (minOrMax == \"min\") {\r\n      if (pointerInputValue >= gestureParameter) {\r\n        return true;\r\n      }\r\n    }\r\n    else if (minOrMax == \"max\") {\r\n      if (pointerInputValue <= gestureParameter) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  validateDirection(pointerInput: SinglePointerInput | DualPointerInput): boolean {\r\n\r\n    const currentDirection = pointerInput.getCurrentDirection();\r\n\r\n    if (\r\n      this.options.supportedDirections.length &&\r\n      !this.options.supportedDirections.includes(\r\n        currentDirection\r\n      )\r\n    ) {\r\n      if (this.DEBUG == true) {\r\n        console.log(\r\n          `[Gestures] dismissing ${this.eventBaseName}: supported directions: ${this.options.supportedDirections}, current direction: ${currentDirection}`\r\n        );\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  validateGestureState(): boolean {\r\n    if (this.state == GestureState.Blocked) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  validatePointerManagerState(pointerManager: PointerManager): boolean {\r\n    if (pointerManager.state == this.validPointerManagerState) {\r\n      return true;\r\n    }\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(\r\n        `[Gesture] PointerManagerState invalidated ${this.eventBaseName}: ${pointerManager.state}`\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  validatePointerInputConstructor(pointerInput: SinglePointerInput | DualPointerInput): boolean {\r\n    if (pointerInput instanceof this.validPointerInputConstructor) {\r\n      return true;\r\n    }\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(\r\n        `[Gesture] PointerInputConstructor invalidated ${this.eventBaseName}: ${this.validPointerInputConstructor}`\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // validate pointerCount and GestureState.Blocked\r\n  validate(pointerManager: PointerManager): boolean {\r\n\r\n    let isValid = this.validateGestureState();\r\n\r\n    if (isValid == true) {\r\n      isValid = this.validatePointerManagerState(pointerManager);\r\n    }\r\n\r\n    const pointerInput = pointerManager.activePointerInput;\r\n\r\n    if (\r\n      isValid == true &&\r\n      pointerInput != null\r\n    ) {\r\n      isValid = this.validatePointerInputConstructor(pointerInput);\r\n\r\n      if (isValid == true) {\r\n        isValid = this.validateDirection(pointerInput);\r\n      }\r\n\r\n      if (isValid == true) {\r\n        isValid = this.validateGestureParameters(pointerInput);\r\n      }\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  recognize(pointerManager: PointerManager): void {\r\n    const isValid = this.validate(pointerManager);\r\n\r\n    if (\r\n      isValid == true &&\r\n      this.state == GestureState.Inactive\r\n    ) {\r\n      this.onStart(pointerManager);\r\n    }\r\n\r\n    if (\r\n      isValid == true &&\r\n      this.state == GestureState.Active\r\n    ) {\r\n\r\n      if (this.initialPointerEvent == null) {\r\n        this.setInitialPointerEvent(pointerManager);\r\n      }\r\n\r\n      this.emit(pointerManager);\r\n\r\n    } else if (this.state == GestureState.Active && isValid == false) {\r\n\r\n      this.onEnd(pointerManager);\r\n\r\n    }\r\n    else {\r\n      if (this.DEBUG == true) {\r\n        console.log(\r\n          `not firing event ${this.eventBaseName}. No SinglePointerInput found`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * The PointerInput for recognition has to be pointerManager.lastRemovedPointer if there is no active pointer left\r\n   */\r\n  getPointerInput(pointerManager: PointerManager): SinglePointerInput | DualPointerInput | null {\r\n\r\n    if (pointerManager.hasPointersOnSurface() == true && pointerManager.activePointerInput instanceof this.validPointerInputConstructor) {\r\n      return pointerManager.activePointerInput;\r\n    }\r\n    else if (pointerManager.lastRemovedPointer instanceof Pointer) {\r\n      const pointerInput = pointerManager.getlastRemovedPointerInput();\r\n      if (pointerInput instanceof this.validPointerInputConstructor) {\r\n        return pointerInput;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  setInitialPointerEvent(pointerManager: PointerManager): void {\r\n    const pointerInput = this.getPointerInput(pointerManager);\r\n    if (pointerInput instanceof this.validPointerInputConstructor) {\r\n      const pointerEvent: PointerEvent = pointerInput.getCurrentPointerEvent();\r\n      this.initialPointerEvent = pointerEvent;\r\n    }\r\n  }\r\n\r\n  emit(pointerManager: PointerManager, eventName?: string): void {\r\n\r\n    // fire general event like \"tap\", \"press\", \"pan\"\r\n    eventName = eventName || this.eventBaseName;\r\n\r\n    if (this.DEBUG === true) {\r\n      console.log(`[Gestures] detected and firing event ${eventName}`);\r\n    }\r\n\r\n    const pointerInput = this.getPointerInput(pointerManager);\r\n\r\n    if (pointerInput != null) {\r\n\r\n      const target = pointerInput.getTarget();\r\n\r\n      if (target instanceof EventTarget) {\r\n\r\n        const eventData = this.getEventData(pointerInput, pointerManager);\r\n\r\n        const eventOptions = {\r\n          detail: eventData,\r\n          bubbles: this.options.bubbles,\r\n        };\r\n\r\n        if (this.DEBUG === true) {\r\n          console.log(eventOptions);\r\n        }\r\n\r\n        const event = new GestureEvent(eventName, eventOptions);\r\n\r\n        if (eventOptions.bubbles == true) {\r\n          target.dispatchEvent(event);\r\n        } else {\r\n          this.domElement.dispatchEvent(event);\r\n        }\r\n\r\n        // fire direction specific events\r\n        const currentDirection = eventData.live.direction;\r\n\r\n        const hasSupportedDirections = !!this.options.supportedDirections;\r\n        // do not fire events like \"panendleft\"\r\n        // only fire directional events if eventName == this.eventBaseName\r\n        if (hasSupportedDirections == true && currentDirection != Direction.None && (eventName == this.eventBaseName || eventName == \"swipe\")) {\r\n          for (let d = 0; d < this.options.supportedDirections.length; d++) {\r\n            const direction = this.options.supportedDirections[d];\r\n\r\n            if (direction == currentDirection) {\r\n              const directionEventName = eventName + direction;\r\n\r\n              if (this.DEBUG == true) {\r\n                console.log(\r\n                  `[Gestures] detected and firing event ${directionEventName}`\r\n                );\r\n              }\r\n\r\n              const directionEvent = new GestureEvent(\r\n                directionEventName,\r\n                eventOptions\r\n              );\r\n\r\n              if (eventOptions.bubbles == true) {\r\n                target.dispatchEvent(directionEvent);\r\n              } else {\r\n                this.domElement.dispatchEvent(directionEvent);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  onStart(pointerManager: PointerManager): void {\r\n    this.blockGestures();\r\n\r\n    this.state = GestureState.Active;\r\n    this.setInitialPointerEvent(pointerManager);\r\n    const eventName = `${this.eventBaseName}start`;\r\n    this.emit(pointerManager, eventName);\r\n  }\r\n\r\n  onEnd(pointerManager: PointerManager): void {\r\n    this.unblockGestures();\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(`[${this.eventBaseName}] ended. Setting ${this.eventBaseName}.state = ${GestureState.Inactive}`);\r\n    }\r\n    this.state = GestureState.Inactive;\r\n\r\n    const eventName = `${this.eventBaseName}end`;\r\n    this.emit(pointerManager, eventName);\r\n\r\n  }\r\n\r\n  // provide the ability to react (eg block) to touch events\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  onTouchStart(event: TouchEvent): void { /* empty */ }\r\n  onTouchMove(event: TouchEvent): void { /* empty */ }\r\n  onTouchEnd(event: TouchEvent): void { /* empty */ }\r\n  onTouchCancel(event: TouchEvent): void { /* empty */ }\r\n  /* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\n  block(gesture: Gesture): void {\r\n    if (this.options.blocks.indexOf(gesture) == -1) {\r\n      this.options.blocks.push(gesture);\r\n    }\r\n  }\r\n\r\n  unblock(gesture: Gesture): void {\r\n    if (this.options.blocks.indexOf(gesture) != -1) {\r\n      this.options.blocks.splice(this.options.blocks.indexOf(gesture), 1);\r\n    }\r\n  }\r\n\r\n  blockGestures(): void {\r\n    for (let g = 0; g < this.options.blocks.length; g++) {\r\n      const gesture = this.options.blocks[g];\r\n      if (gesture.state == GestureState.Inactive) {\r\n        if (this.DEBUG == false) {\r\n          console.log(\r\n            `[Gesture] blocking ${gesture.eventBaseName}`\r\n          );\r\n        }\r\n        gesture.state = GestureState.Blocked;\r\n      }\r\n    }\r\n  }\r\n\r\n  unblockGestures(): void {\r\n    for (let g = 0; g < this.options.blocks.length; g++) {\r\n      const gesture = this.options.blocks[g];\r\n      gesture.state = GestureState.Inactive;\r\n    }\r\n  }\r\n\r\n  getEventData(pointerInput: SinglePointerInput | DualPointerInput, pointerManager: PointerManager): GestureEventData {\r\n    throw new Error(\"Gesture subclasses require a getEventData method()\");\r\n  }\r\n\r\n}\r\n","import {\r\n  Gesture,\r\n  GestureOptions,\r\n  LiveGestureEventData,\r\n  GlobalGestureEventData,\r\n  GestureEventData,\r\n} from \"./Gesture\";\r\n\r\nimport { PointerManagerState } from \"../input-consts\";\r\nimport { SinglePointerGestureParameters } from \"../interfaces\";\r\nimport { Point } from \"../geometry/Point\";\r\nimport { Vector } from \"../geometry/Vector\";\r\nimport { SinglePointerInput } from \"../SinglePointerInput\";\r\nimport { PointerManager } from \"../PointerManager\";\r\n\r\n\r\n\r\nexport abstract class SinglePointerGesture extends Gesture {\r\n\r\n  initialPointerEvent: PointerEvent | null;\r\n\r\n  initialParameters: SinglePointerGestureParameters;\r\n  activeStateParameters: SinglePointerGestureParameters;\r\n\r\n  constructor(domElement: HTMLElement, options?: Partial<GestureOptions>) {\r\n    super(domElement, options);\r\n\r\n    this.initialPointerEvent = null;\r\n    this.validPointerManagerState = PointerManagerState.SinglePointer;\r\n\r\n    const nullRecognitionParameters = this.getEmptyGestureParameters() as SinglePointerGestureParameters;\r\n\r\n    this.initialParameters = { ...nullRecognitionParameters };\r\n    // a deep copy of the parameters is needed as they can have different values\r\n    this.activeStateParameters = JSON.parse(JSON.stringify({ ...nullRecognitionParameters }));\r\n  }\r\n\r\n  getEventData(singlePointerInput: SinglePointerInput, pointerManager: PointerManager): GestureEventData {\r\n    // provide short-cuts to the values collected in the Contact object\r\n    // match this to the event used by hammer.js\r\n\r\n    const globalParameters = singlePointerInput.parameters.live;\r\n    const liveParameters = singlePointerInput.parameters.live;\r\n\r\n    let globalVector: Vector = globalParameters.vector;\r\n    let globalDuration: number = globalParameters.duration;\r\n\r\n    // gesture specific - dependant on the beginning of the gesture (when the gesture has initially been recognized)\r\n    if (this.initialPointerEvent != null) {\r\n      const globalStartPoint = new Point(\r\n        this.initialPointerEvent.clientX,\r\n        this.initialPointerEvent.clientY\r\n      );\r\n      const globalEndPoint = new Point(\r\n        singlePointerInput.pointer.currentPointerEvent.clientX,\r\n        singlePointerInput.pointer.currentPointerEvent.clientY\r\n      );\r\n      globalVector = new Vector(globalStartPoint, globalEndPoint);\r\n      globalDuration =\r\n        singlePointerInput.pointer.currentPointerEvent.timeStamp -\r\n        this.initialPointerEvent.timeStamp;\r\n    }\r\n\r\n    // global: global for this recognizer, not the Contact object\r\n    const globalGestureEventData: GlobalGestureEventData = {\r\n      deltaX: globalVector.x,\r\n      deltaY: globalVector.y,\r\n      distance: globalVector.vectorLength,\r\n      speedX: globalVector.x / globalDuration,\r\n      speedY: globalVector.y / globalDuration,\r\n      speed: globalVector.vectorLength / globalDuration,\r\n      direction: globalVector.direction,\r\n      scale: 1,\r\n      rotation: 0,\r\n      center: {\r\n        x: globalParameters.vector.endPoint.x,\r\n        y: globalParameters.vector.endPoint.y,\r\n      },\r\n      srcEvent: singlePointerInput.pointer.currentPointerEvent,\r\n    };\r\n\r\n    const liveGestureEventData: LiveGestureEventData = {\r\n      deltaX: liveParameters.vector.x,\r\n      deltaY: liveParameters.vector.y,\r\n      distance: liveParameters.vector.vectorLength,\r\n      speedX:\r\n        liveParameters.vector.x / singlePointerInput.pointer.vectorTimespan,\r\n      speedY:\r\n        liveParameters.vector.y / singlePointerInput.pointer.vectorTimespan,\r\n      speed: liveParameters.speed,\r\n      direction: liveParameters.vector.direction,\r\n      scale: 1,\r\n      rotation: 0,\r\n      center: {\r\n        x: liveParameters.vector.endPoint.x,\r\n        y: liveParameters.vector.endPoint.y,\r\n      },\r\n      srcEvent: singlePointerInput.pointer.currentPointerEvent /*,\r\n      target : primaryPointerInput.touch.target,\r\n      pointerType : ,\r\n      eventType : ,\r\n      isFirst : ,\r\n      isFinal :,\r\n      pointers : ,*/,\r\n    };\r\n\r\n    const eventData: GestureEventData = {\r\n      recognizer: this,\r\n      global: globalGestureEventData,\r\n      live: liveGestureEventData,\r\n      pointerManager: pointerManager,\r\n    };\r\n\r\n    return eventData;\r\n  }\r\n\r\n  validateButton(pointerManager: PointerManager): boolean {\r\n\r\n    if (this.options.supportedButtons.length > 0){\r\n\r\n      const activePointerInput = pointerManager.activePointerInput;\r\n      const lastRemovedPointer = pointerManager.lastRemovedPointer;\r\n\r\n      let pointerEvent = null;\r\n\r\n      if (activePointerInput != null) {\r\n        pointerEvent = activePointerInput.getCurrentPointerEvent();\r\n      }\r\n      else if (lastRemovedPointer != null) {\r\n        pointerEvent = lastRemovedPointer.currentPointerEvent;\r\n      }\r\n\r\n      if (pointerEvent != null && pointerEvent.pointerType == \"mouse\" && this.options.supportedButtons.indexOf(pointerEvent.buttons) == -1) {\r\n\r\n        if (this.DEBUG == true) {\r\n          console.log(\r\n            `dismissing ${this.eventBaseName}: supportedButtons: ${this.options.supportedButtons.toString()}, poinerEvent.buttons: ${pointerEvent.buttons}`\r\n          );\r\n        }\r\n\r\n        return false;\r\n      }\r\n    \r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  validate(pointerManager: PointerManager): boolean {\r\n    let isValid = this.validateButton(pointerManager);\r\n\r\n    if (isValid == true) {\r\n      isValid = super.validate(pointerManager);\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n}","import { GestureOptions } from \"./Gesture\";\r\nimport { SinglePointerGesture } from \"./SinglePointerGesture\";\r\nimport { PointerManager } from \"../PointerManager\";\r\nimport { SinglePointerInput } from \"../SinglePointerInput\";\r\nimport { PointerManagerState } from \"../input-consts\";\r\n\r\n\r\ninterface TapOptions extends GestureOptions {\r\n  maxDuration: number;\r\n  maxDistance: number;\r\n}\r\n\r\n/*\r\n * TAP DEFINITION\r\n * - user touches the screen with one finger or presses the mouse button down\r\n * - the finger does not move for x ms\r\n * - no additional fingers are added\r\n * - the finger is released, Tap is no recognized\r\n */\r\nexport class Tap extends SinglePointerGesture {\r\n\r\n  constructor(domElement: HTMLElement, options?: Partial<TapOptions>) {\r\n    super(domElement, options);\r\n\r\n    this.validPointerManagerState = PointerManagerState.NoPointer;\r\n\r\n    this.eventBaseName = \"tap\";\r\n\r\n    let globalMaxDuration = 499;\r\n    let liveMaxDistance = 30;\r\n    let globalMaxDistance = 30;\r\n\r\n    if (options){\r\n      if (\"maxDuration\" in options){\r\n        globalMaxDuration = options[\"maxDuration\"];\r\n      }\r\n\r\n      if (\"maxDistance\" in options){\r\n        liveMaxDistance = options[\"maxDistance\"];\r\n        globalMaxDistance = options[\"maxDistance\"];\r\n      }\r\n    }\r\n\r\n    this.initialParameters.global.max[\"duration\"] = globalMaxDuration; // milliseconds. after a certain touch duration, it is not a TAP anymore\r\n\r\n    this.initialParameters.live.max[\"distance\"] = liveMaxDistance; // if a certain distance is detected, TAP becomes impossible\r\n    this.initialParameters.global.max[\"distance\"] = globalMaxDistance; // if a certain distance is detected, TAP becomes impossible\r\n\r\n  }\r\n\r\n  validateButton(pointerManager: PointerManager): boolean {\r\n\r\n    if (this.options.supportedButtons.length > 0){\r\n\r\n      const lastRemovedPointer = pointerManager.lastRemovedPointer;\r\n\r\n      if (lastRemovedPointer != null) {\r\n        const pointerEvent = lastRemovedPointer.currentPointerEvent;\r\n      \r\n        // pointerEvent.button instead of pointerEvent.buttons\r\n        if (pointerEvent.pointerType == \"mouse\" && this.options.supportedButtons.indexOf(pointerEvent.button) == -1) {\r\n\r\n          if (this.DEBUG == true) {\r\n            console.log(\r\n              `dismissing ${this.eventBaseName}: supportedButtons: ${this.options.supportedButtons.toString()}, poinerEvent.button: ${pointerEvent.button}`\r\n            );\r\n          }\r\n\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  validate(pointerManager: PointerManager): boolean {\r\n\r\n    let isValid = this.validateGestureState();\r\n\r\n    if (isValid == true){\r\n      isValid = this.validatePointerManagerState(pointerManager);\r\n    }\r\n\r\n    if (isValid == true){\r\n      isValid = this.validateButton(pointerManager);\r\n    }\r\n\r\n    if (isValid === true) {\r\n\r\n      if (pointerManager.lastInputSessionPointerCount != 1) {\r\n        return false;\r\n      }\r\n      else {\r\n\r\n        const singlePointerInput = pointerManager.getlastRemovedPointerInput();\r\n\r\n        if (singlePointerInput instanceof SinglePointerInput) {\r\n\r\n          isValid = this.validateGestureParameters(singlePointerInput);\r\n\r\n        }\r\n        else {\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  // do not set Tap.state = GestureState.active as Tap has no active state\r\n  onStart(pointerManager: PointerManager): void {\r\n    this.setInitialPointerEvent(pointerManager);\r\n    this.emit(pointerManager);\r\n  }\r\n\r\n}","import { GestureOptions } from \"./Gesture\";\r\nimport { SinglePointerGesture } from \"./SinglePointerGesture\";\r\nimport { PointerManager } from \"../PointerManager\";\r\nimport { SinglePointerInput } from \"../SinglePointerInput\";\r\nimport { GestureState } from \"../input-consts\";\r\n\r\n\r\ninterface PressOptions extends GestureOptions {\r\n  minDuration: number,\r\n  maxDistance: number,\r\n}\r\n/*\r\n * press should only be fired once\r\n * if global duration is below Press.initialMinMaxParameters[\"duration\"][0], set the Press to possible\r\n * if global duration is above Press.initialMinMaxParameters[\"duration\"][0] AND press already has been emitted, set Press to impossible\r\n *\r\n */\r\nexport class Press extends SinglePointerGesture {\r\n  hasBeenEmitted: boolean;\r\n\r\n  private static minDuration = 500;\r\n\r\n  constructor(domElement: HTMLElement, options?: Partial<PressOptions>) {\r\n    super(domElement, options);\r\n\r\n    this.eventBaseName = \"press\";\r\n\r\n    let globalMinDuration = 500;\r\n    let globalMaxDistance = 10;\r\n    let globalMaxMaximumDistance = 20;\r\n\r\n    if (options){\r\n      if (\"minDuration\" in options){\r\n        globalMinDuration = options[\"minDuration\"];\r\n      }\r\n\r\n      if (\"maxDistance\" in options){\r\n        globalMaxMaximumDistance = options[\"maxDistance\"];\r\n        globalMaxDistance = options[\"maxDistance\"];\r\n      }\r\n    }\r\n\r\n    this.initialParameters.global.min[\"duration\"] = globalMinDuration; // milliseconds. after a certain touch duration, it is not a TAP anymore\r\n\r\n    this.initialParameters.global.max[\"distance\"] = globalMaxDistance; // if the pointer moved a certain distance, Press becomes impossible\r\n    this.initialParameters.global.max[\"maximumDistance\"] = globalMaxMaximumDistance;\r\n    // only Press has this parameter\r\n    this.hasBeenEmitted = false;\r\n\r\n  }\r\n\r\n  recognize(pointerManager: PointerManager): void {\r\n    const isValid = this.validate(pointerManager);\r\n\r\n    const singlePointerInput = this.getPointerInput(pointerManager);\r\n\r\n    // is this line really necessary? ESLint complains if it is not present, although its value is set in the constructor\r\n    // adding Object.freeze(this.initialParameters) in the constructor did not resolve the ESLint error\r\n    const minDuration = this.initialParameters.global.min[\"duration\"] || Press.minDuration;\r\n\r\n    if (singlePointerInput instanceof SinglePointerInput) {\r\n\r\n      if (\r\n        isValid == true &&\r\n        this.hasBeenEmitted == false\r\n      ) {\r\n\r\n        this.setInitialPointerEvent(pointerManager);\r\n\r\n        this.emit(pointerManager);\r\n\r\n        this.hasBeenEmitted = true;\r\n        this.state = GestureState.Active;\r\n        this.blockGestures();\r\n\r\n      } else if (isValid == false && this.hasBeenEmitted == true) {\r\n        this.onEnd(pointerManager);\r\n        this.state = GestureState.Inactive;\r\n        this.hasBeenEmitted = false;\r\n      } else {\r\n        const duration = singlePointerInput.parameters.global.duration;\r\n\r\n        if (\r\n          this.hasBeenEmitted == true &&\r\n          duration <= minDuration\r\n        ) {\r\n          this.hasBeenEmitted = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (singlePointerInput == null) {\r\n      this.hasBeenEmitted = false;\r\n    }\r\n  }\r\n}","import { GestureOptions } from \"./Gesture\";\r\nimport { SinglePointerGesture } from \"./SinglePointerGesture\";\r\nimport { PointerManager } from \"../PointerManager\";\r\nimport { SinglePointerInput } from \"../SinglePointerInput\";\r\n\r\nimport {\r\n  Directions,\r\n  PointerManagerState,\r\n  GestureState,\r\n} from \"../input-consts\";\r\nimport { Direction } from \"..\";\r\n\r\n/*\r\n * PAN DEFINITION:\r\n *\t- user touches surface with only one finger, or presses the mouse down\r\n *\t- user moves this one finger into different directions while staying on the surface, this movement is required\r\n *\t- the start of a pan is defined by a minimum pointerdown/touch duration and a minimum distance\r\n *\t- pan ends when the user removes the finger from the surface\r\n *\t- to detect a \"swipe\", the final speed is used\r\n *\t- a SWIPE is a pan that ended with a high speed (velocity without direction)\r\n *\t- Pan supports directions. options[\"supportedDirections\"] = []\r\n */\r\n\r\nexport class Pan extends SinglePointerGesture {\r\n  swipeFinalSpeed: number;\r\n  isSwipe: boolean;\r\n  initialSupportedDirections: string[];\r\n\r\n  constructor(domElement: HTMLElement, options?: Partial<GestureOptions>) {\r\n    super(domElement, options);\r\n\r\n    this.validPointerManagerState = PointerManagerState.SinglePointer;\r\n\r\n    this.eventBaseName = \"pan\";\r\n\r\n    this.initialParameters.global.min[\"duration\"] = 0;\r\n    this.initialParameters.live.min[\"distance\"] = 10;\r\n    this.initialParameters.global.boolean[\"hasBeenMoved\"] = true;\r\n\r\n    this.swipeFinalSpeed = 600;\r\n\r\n    this.isSwipe = false;\r\n\r\n    this.options.supportedDirections = options?.supportedDirections ?? Directions.All;\r\n    this.initialSupportedDirections = this.options.supportedDirections;\r\n  }\r\n\r\n  validate(pointerManager: PointerManager): boolean {\r\n    // on second recognition allow all directions. otherwise, the \"pan\" mode would end if the finger was moved right and then down during \"panleft\" mode\r\n    if (this.state == GestureState.Active) {\r\n      this.options.supportedDirections = Directions.All;\r\n    }\r\n\r\n    const isValid = super.validate(pointerManager);\r\n\r\n    return isValid;\r\n  }\r\n\r\n  onStart(pointerManager: PointerManager): void {\r\n    this.isSwipe = false;\r\n\r\n    super.onStart(pointerManager);\r\n  }\r\n\r\n  // check if it was a swipe\r\n  onEnd(pointerManager: PointerManager): void {\r\n\r\n    const singlePointerInput = pointerManager.getlastRemovedPointerInput();\r\n\r\n    if (singlePointerInput instanceof SinglePointerInput) {\r\n\r\n      if (\r\n        this.swipeFinalSpeed < singlePointerInput.parameters.global.finalSpeed && singlePointerInput.parameters.live.vector.direction != Direction.None\r\n      ) {\r\n\r\n        this.isSwipe = true;\r\n        this.emit(pointerManager, \"swipe\");\r\n      }\r\n      else {\r\n        if (this.DEBUG == true){\r\n          if (singlePointerInput.parameters.global.finalSpeed < this.swipeFinalSpeed){\r\n            console.log(`[Pan] dismissing swipe. Final speed: ${singlePointerInput.parameters.global.finalSpeed} < ${this.swipeFinalSpeed}`);\r\n          }\r\n          else {\r\n            console.log(`[Pan] dismissing swipe. Direction: ${singlePointerInput.parameters.live.vector.direction}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    super.onEnd(pointerManager);\r\n\r\n    this.options.supportedDirections = this.initialSupportedDirections;\r\n  }\r\n\r\n  onTouchMove(event: TouchEvent): void {\r\n    if (this.state == GestureState.Active) {\r\n      if (this.DEBUG == true) {\r\n        console.log(\"[Pan] preventing touchmove default\");\r\n      }\r\n\r\n      // event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n}\r\n","import { Geometry } from \"./geometry/Geometry\";\r\nimport {\r\n  Pointer,\r\n} from \"./Pointer\";\r\nimport {\r\n  DualPointerInputGlobalParameters,\r\n  DualPointerInputLiveParameters,\r\n  DualPointerInputParameters,\r\n} from \"./interfaces\";\r\n\r\n/**\r\n * DualPointerInput\r\n * \t- For gestures like Pinch, Rotate, TwoFingerPan\r\n */\r\nexport class DualPointerInput {\r\n\r\n  readonly pointerIds: Set<number>;\r\n\r\n  readonly pointerMap: Record<number, Pointer>;\r\n\r\n  readonly pointer_1: Pointer;\r\n  readonly pointer_2: Pointer;\r\n\r\n  readonly parameters: DualPointerInputParameters;\r\n\r\n  readonly initialPointerEvent: PointerEvent;\r\n  currentPointerEvent: PointerEvent;\r\n\r\n  readonly startTimestamp: number;\r\n\r\n  constructor(pointer_1: Pointer, pointer_2: Pointer) {\r\n\r\n    this.pointerIds = new Set([pointer_1.pointerId, pointer_2.pointerId]);\r\n\r\n    this.startTimestamp = new Date().getTime();\r\n\r\n    this.pointerMap = {};\r\n    this.pointerMap[pointer_1.pointerId] = pointer_1;\r\n    this.pointerMap[pointer_2.pointerId] = pointer_2;\r\n\r\n    this.pointer_1 = pointer_1;\r\n    this.pointer_2 = pointer_2;\r\n\r\n    this.initialPointerEvent = pointer_1.initialPointerEvent;\r\n    this.currentPointerEvent = pointer_1.initialPointerEvent;\r\n\r\n    const globalVector_1 = this.pointer_1.parameters.global.vector;\r\n    const globalVector_2 = this.pointer_2.parameters.global.vector;\r\n    const globalCenter = Geometry.getCenter(globalVector_1.startPoint, globalVector_2.startPoint);\r\n    const globalCenterMovementVector = Geometry.getCenterMovementVector(globalVector_1, globalVector_2);\r\n\r\n    const globalParameters: DualPointerInputGlobalParameters = {\r\n      duration: 0,\r\n      center: globalCenter,\r\n      centerHasBeenMoved: false,\r\n      centerMovementDistance: 0,\r\n      centerMovementVector: globalCenterMovementVector,\r\n      absolutePointerDistanceChange: 0,\r\n      relativePointerDistanceChange: 0,\r\n      rotationAngle: 0,\r\n      absoluteRotationAngle: 0,\r\n      vectorAngle: 0,\r\n      absoluteVectorAngle: 0,\r\n    };\r\n\r\n    const liveVector_1 = this.pointer_1.parameters.live.vector;\r\n    const liveVector_2 = this.pointer_2.parameters.live.vector;\r\n    const liveCenter = Geometry.getCenter(liveVector_1.startPoint, liveVector_2.startPoint);\r\n    const liveCenterMovementVector = Geometry.getCenterMovementVector(liveVector_1, liveVector_2);\r\n\r\n\r\n    const liveParameters: DualPointerInputLiveParameters = {\r\n      center: liveCenter,\r\n      centerIsMoving: false,\r\n      centerMovementDistance: 0,\r\n      centerMovementVector: liveCenterMovementVector,\r\n      absolutePointerDistanceChange: 0,\r\n      relativePointerDistanceChange: 0,\r\n      rotationAngle: 0,\r\n      absoluteRotationAngle: 0,\r\n      vectorAngle: 0,\r\n      absoluteVectorAngle: 0,\r\n    };\r\n\r\n    const parameters: DualPointerInputParameters = {\r\n      global: globalParameters,\r\n      live: liveParameters,\r\n    };\r\n\r\n    this.parameters = parameters;\r\n  }\r\n\r\n  removePointer(pointerId: number): Pointer {\r\n    if (pointerId == this.pointer_1.pointerId) {\r\n      return this.pointer_2;\r\n    }\r\n    else if (pointerId == this.pointer_2.pointerId) {\r\n      return this.pointer_1;\r\n    }\r\n    else {\r\n      throw new Error(`[DualPointerInput] cannot remove Pointer #${pointerId}. The pointer is not part of this DualPointerInput`);\r\n    }\r\n  }\r\n\r\n  getTarget(): EventTarget | null {\r\n    return this.initialPointerEvent.target;\r\n  }\r\n\r\n  update (pointerEvent?: PointerEvent): void {\r\n\r\n    if (pointerEvent instanceof PointerEvent){\r\n      this.currentPointerEvent = pointerEvent;\r\n    }\r\n\r\n    const now = new Date().getTime();\r\n    this.parameters.global[\"duration\"] = now - this.startTimestamp;\r\n\r\n    const globalVector_1 = this.pointer_1.parameters.global.vector;\r\n    const globalVector_2 = this.pointer_2.parameters.global.vector;\r\n    const globalCenter = Geometry.getCenter(globalVector_1.startPoint, globalVector_2.startPoint);\r\n    const globalCenterMovementVector = Geometry.getCenterMovementVector(globalVector_1, globalVector_2);\r\n    const globalAbsoluteDistanceChange = Geometry.calculateAbsoluteDistanceChange(globalVector_1, globalVector_2);\r\n    const globalRelativeDistanceChange = Geometry.calculateRelativeDistanceChange(globalVector_1, globalVector_2);\r\n    const globalRotationAngle = Geometry.calculateRotationAngle(globalVector_1, globalVector_2);\r\n    const globalVectorAngle = Geometry.calculateVectorAngle(globalVector_1, globalVector_2);\r\n\r\n    this.parameters.global[\"center\"] = globalCenter;\r\n    this.parameters.global[\"centerMovementVector\"] = globalCenterMovementVector;\r\n    this.parameters.global[\"centerMovementDistance\"] = globalCenterMovementVector.vectorLength;\r\n    this.parameters.global[\"absolutePointerDistanceChange\"] = globalAbsoluteDistanceChange;\r\n    this.parameters.global[\"relativePointerDistanceChange\"] = globalRelativeDistanceChange;\r\n    this.parameters.global[\"rotationAngle\"] = globalRotationAngle;\r\n    this.parameters.global[\"absoluteRotationAngle\"] = Math.abs(globalRotationAngle);\r\n    this.parameters.global[\"vectorAngle\"] = globalVectorAngle;\r\n    this.parameters.global[\"absoluteVectorAngle\"] = Math.abs(globalVectorAngle);\r\n\r\n    const liveVector_1 = this.pointer_1.parameters.live.vector;\r\n    const liveVector_2 = this.pointer_2.parameters.live.vector;\r\n    const liveCenter = Geometry.getCenter(liveVector_1.startPoint, liveVector_2.startPoint);\r\n    const liveCenterMovementVector = Geometry.getCenterMovementVector(liveVector_1, liveVector_2);\r\n    const liveAbsoluteDistanceChange = Geometry.calculateAbsoluteDistanceChange(liveVector_1, liveVector_2);\r\n    const liveRelativeDistanceChange = Geometry.calculateRelativeDistanceChange(liveVector_1, liveVector_2);\r\n    // calculate rotation angle. imagine the user turning a wheel with 2 fingers\r\n    const liveRotationAngle = Geometry.calculateRotationAngle(liveVector_1, liveVector_2);\r\n    const liveVectorAngle = Geometry.calculateVectorAngle(liveVector_1, liveVector_2);\r\n\r\n    if (liveCenterMovementVector.vectorLength > 0){\r\n      this.parameters.live.centerIsMoving = true;\r\n      this.parameters.global.centerHasBeenMoved = true;\r\n    }\r\n    else {\r\n      this.parameters.live.centerIsMoving = false;\r\n    }\r\n\r\n    this.parameters.live[\"center\"] = liveCenter;\r\n    this.parameters.live[\"centerMovementDistance\"] = liveCenterMovementVector.vectorLength;\r\n    this.parameters.live[\"centerMovementVector\"] = liveCenterMovementVector;\r\n    this.parameters.live[\"absolutePointerDistanceChange\"] = liveAbsoluteDistanceChange;\r\n    this.parameters.live[\"relativePointerDistanceChange\"] = liveRelativeDistanceChange;\r\n    this.parameters.live[\"rotationAngle\"] = liveRotationAngle;\r\n    this.parameters.live[\"absoluteRotationAngle\"] = Math.abs(liveRotationAngle);\r\n    this.parameters.live[\"vectorAngle\"] = liveVectorAngle;\r\n    this.parameters.live[\"absoluteVectorAngle\"] = Math.abs(liveVectorAngle);\r\n  }\r\n\r\n  onPointerMove(pointermoveEvent: PointerEvent): void {\r\n    this.update(pointermoveEvent);\r\n  }\r\n\r\n  onPointerUp(pointerupEvent: PointerEvent): void {\r\n    this.update(pointerupEvent);\r\n  }\r\n\r\n  onPointerLeave(pointerleaveEvent: PointerEvent): void {\r\n    this.update(pointerleaveEvent);\r\n  }\r\n\r\n  onPointerCancel(pointercancelEvent: PointerEvent): void {\r\n    this.update(pointercancelEvent);\r\n  }\r\n\r\n  onIdle(): void {\r\n    this.update();\r\n  }\r\n\r\n  // string is not good, it should be Direction\r\n  getCurrentDirection() : string {\r\n    return this.parameters.live.centerMovementVector.direction;\r\n  }\r\n\r\n  getCurrentPointerEvent(): PointerEvent {\r\n    return this.currentPointerEvent;\r\n  }\r\n\r\n}\r\n","import {\r\n  Gesture,\r\n  GestureOptions,\r\n  LiveGestureEventData,\r\n  GlobalGestureEventData,\r\n  GestureEventData,\r\n} from \"./Gesture\";\r\n\r\nimport {\r\n  DualPointerGestureParameters,\r\n} from \"../interfaces\";\r\n\r\nimport { DualPointerInput } from \"../DualPointerInput\";\r\n\r\nimport {\r\n  PointerManagerState\r\n} from \"../input-consts\";\r\nimport { PointerManager } from \"../PointerManager\";\r\n\r\nexport abstract class DualPointerGesture extends Gesture {\r\n\r\n  initialPointerEvent_1: PointerEvent | null;\r\n  initialPointerEvent_2: PointerEvent | null;\r\n\r\n  initialParameters: DualPointerGestureParameters;\r\n  activeStateParameters: DualPointerGestureParameters;\r\n\r\n  constructor(domElement: HTMLElement, options?: Partial<GestureOptions>) {\r\n    super(domElement, options);\r\n    this.initialPointerEvent_1 = null;\r\n    this.initialPointerEvent_2 = null;\r\n    this.validPointerManagerState = PointerManagerState.DualPointer;\r\n    this.validPointerInputConstructor = DualPointerInput;\r\n\r\n    const nullRecognitionParameters = this.getEmptyGestureParameters() as DualPointerGestureParameters;\r\n\r\n    this.initialParameters = { ...nullRecognitionParameters };\r\n    this.activeStateParameters = JSON.parse(JSON.stringify({ ...nullRecognitionParameters }));\r\n  }\r\n\r\n  getEventData(dualPointerInput: DualPointerInput, pointerManager: PointerManager): GestureEventData {\r\n    // provide short-cuts to the values collected in the Contact object\r\n    // match this to the event used by hammer.js\r\n\r\n    const globalParameters = dualPointerInput.parameters.global;\r\n    const liveParameters = dualPointerInput.parameters.live;\r\n\r\n    const globalGestureEventData: GlobalGestureEventData = {\r\n      deltaX: globalParameters.centerMovementVector.x,\r\n      deltaY: globalParameters.centerMovementVector.y,\r\n      distance: globalParameters.centerMovementDistance,\r\n      speedX: globalParameters.centerMovementVector.x / globalParameters.duration,\r\n      speedY: globalParameters.centerMovementVector.y / globalParameters.duration,\r\n      speed:\r\n        globalParameters.centerMovementVector.vectorLength / globalParameters.duration,\r\n      direction: globalParameters.centerMovementVector.direction,\r\n      scale: globalParameters.relativePointerDistanceChange,\r\n      rotation: globalParameters.rotationAngle,\r\n      center: globalParameters.center,\r\n      srcEvent: dualPointerInput.currentPointerEvent,\r\n    };\r\n\r\n    const liveGestureEventData: LiveGestureEventData = {\r\n      deltaX: liveParameters.centerMovementVector.x,\r\n      deltaY: liveParameters.centerMovementVector.y,\r\n      distance: liveParameters.centerMovementDistance,\r\n      speedX: liveParameters.centerMovementVector.x / globalParameters.duration,\r\n      speedY: liveParameters.centerMovementVector.y / globalParameters.duration,\r\n      speed: liveParameters.centerMovementVector.vectorLength / globalParameters.duration,\r\n      direction: liveParameters.centerMovementVector.direction,\r\n      scale: liveParameters.relativePointerDistanceChange,\r\n      rotation: liveParameters.rotationAngle,\r\n      center: {\r\n        x: liveParameters.centerMovementVector.startPoint.x,\r\n        y: liveParameters.centerMovementVector.startPoint.y,\r\n      },\r\n      srcEvent: dualPointerInput.currentPointerEvent,\r\n    };\r\n\r\n    const gestureEventData: GestureEventData = {\r\n      recognizer: this,\r\n      global: globalGestureEventData,\r\n      live: liveGestureEventData,\r\n      pointerManager: pointerManager,\r\n    };\r\n\r\n    return gestureEventData;\r\n  }\r\n\r\n}","import { DualPointerGesture } from \"./DualPointerGesture\";\r\nimport { GestureOptions } from \"./Gesture\";\r\n\r\n/*\r\n * PINCH DEFINITION\r\n * - 2 fingers touch the surface\r\n * - those fongers are moved towards each other, or away from each other\r\n * - 2 fingers define a circle: center=middle between two touches, diameter = distance\r\n * - the center between the 2 fingers stays at the same coordinates\r\n * - the distance between the 2 start points and the two end points is reduces (diameter shrinks)\r\n */\r\nexport class Pinch extends DualPointerGesture {\r\n  constructor(domElement: HTMLElement, options?: Partial<GestureOptions>) {\r\n    super(domElement, options);\r\n\r\n    this.eventBaseName = \"pinch\";\r\n\r\n    this.initialParameters.live.min[\"centerMovementDistance\"] = 0;\r\n    this.initialParameters.live.max[\"centerMovementDistance\"] = 50; //px\r\n    this.initialParameters.live.min[\"absolutePointerDistanceChange\"] = 5; // distance between 2 fingers\r\n    this.initialParameters.live.max[\"absoluteRotationAngle\"] = 20;\r\n    this.initialParameters.live.min[\"absoluteVectorAngle\"] = 10;\r\n  }\r\n}","import { DualPointerGesture } from \"./DualPointerGesture\";\r\nimport { GestureOptions } from \"./Gesture\";\r\n\r\n/*\r\n * ROTATE DEFINITION\r\n * - 2 fingers touch the surface\r\n * - 1 or 2 fingers are moved in a circular motion. the center is between the 2 fingers\r\n */\r\n\r\nexport class Rotate extends DualPointerGesture {\r\n  constructor(domElement: HTMLElement, options?: Partial<GestureOptions>) {\r\n    super(domElement, options);\r\n\r\n    this.eventBaseName = \"rotate\";\r\n\r\n    this.initialParameters.live.min[\"centerMovementDistance\"] = 0;\r\n    this.initialParameters.live.max[\"centerMovementDistance\"] = 50;\r\n    this.initialParameters.live.max[\"absolutePointerDistanceChange\"] = 50;\r\n    this.initialParameters.live.min[\"absoluteRotationAngle\"] = 5;\r\n\r\n    this.activeStateParameters.live.min[\"absoluteRotationAngle\"] = 0;\r\n  }\r\n}","import { DualPointerGesture } from \"./DualPointerGesture\";\r\nimport { GestureOptions } from \"./Gesture\";\r\n\r\n/*\r\n * TWOFINGERPAN DEFINITION\r\n * 2 fingers are moved across the surface, in the same direction\r\n */\r\nexport class TwoFingerPan extends DualPointerGesture {\r\n  constructor(domElement: HTMLElement, options?: Partial<GestureOptions>) {\r\n    super(domElement, options);\r\n\r\n    this.eventBaseName = \"twofingerpan\";\r\n\r\n    this.initialParameters.live.min[\"centerMovementDistance\"] = 10;\r\n    this.initialParameters.live.max[\"absolutePointerDistanceChange\"] = 50;\r\n    this.initialParameters.live.max[\"absoluteVectorAngle\"] = 150;\r\n\r\n    this.activeStateParameters.live.min[\"centerMovementDistance\"] = 0;\r\n\r\n  }\r\n}\r\n","import { PointerManagerState } from \"./input-consts\";\r\nimport { Pointer } from \"./Pointer\";\r\nimport { SinglePointerInput } from \"./SinglePointerInput\";\r\nimport { DualPointerInput } from \"./DualPointerInput\";\r\n\r\n/*\r\n * At the time the user touches the surface it is not known which gesture he will perform. He can also add or remove touches.\r\n * The contact phenomenon starts when the user initially touches the surface, and ends when no more touches are present.\r\n * During the contact phenonmenon between human being and artificial surface, different gestures can be detected.\r\n * According to the gesture definitions, a gesture can be possible or impossible at a given time.\r\n */\r\n\r\n/*\r\n*\tPointerManager\r\n*\t- keeps track of added and removed pointers\r\n*\t- decides if the current gesture is SinglePointerInput or DualPointerInput\r\n*\t\tbecomes activeSinglePointerInput\r\n*/\r\ninterface PointerManagerOptions {\r\n  DEBUG: boolean,\r\n}\r\n\r\nexport class PointerManager {\r\n\r\n  DEBUG: boolean;\r\n\r\n  activePointerInput: SinglePointerInput | DualPointerInput | null;\r\n\r\n  // this pointer is not on the surface any more - some gestures are detected after a pointer has been released\r\n  lastRemovedPointer: Pointer | null;\r\n\r\n  lastInputSessionPointerCount: number;\r\n\r\n  private pointerAllocation: Record<number, SinglePointerInput | DualPointerInput>; // map pointerId to the *PointerInput the Pointer is currently used for\r\n  private unusedPointers: Record<number, Pointer>; // on the surface, but not used for gesture recognition, eg a third pointer\r\n  private onSurfacePointers: Record<number, Pointer>; // covers active and unused Pointers\r\n\r\n  state: PointerManagerState;\r\n\r\n  options: PointerManagerOptions;\r\n\r\n  constructor(options?: Partial<PointerManagerOptions>) {\r\n\r\n    options = options || {};\r\n\r\n    this.options = {\r\n      DEBUG: false,\r\n      ...options\r\n    };\r\n\r\n    this.DEBUG = this.options.DEBUG;\r\n\r\n    this.state = PointerManagerState.NoPointer;\r\n    this.activePointerInput = null;\r\n    this.lastRemovedPointer = null;\r\n    this.lastInputSessionPointerCount = 0;\r\n    this.pointerAllocation = {};\r\n    this.unusedPointers = {}; // pointers on the surface that are not interpreted right now\r\n    this.onSurfacePointers = {};\r\n\r\n  }\r\n\r\n  addPointer(pointerdownEvent: PointerEvent): void {\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(`[PointerManager] adding Pointer #${pointerdownEvent.pointerId.toString()}`);\r\n    }\r\n\r\n    const pointerOptions = {\r\n      DEBUG: this.DEBUG,\r\n    };\r\n    const pointer = new Pointer(pointerdownEvent, pointerOptions);\r\n\r\n    this.onSurfacePointers[pointer.pointerId] = pointer;\r\n\r\n    if (this.activePointerInput == null) {\r\n      this.setActiveSinglePointerInput(pointer);\r\n    }\r\n    else if (this.activePointerInput instanceof SinglePointerInput) {\r\n      this.setActiveDualPointerInput(this.activePointerInput.pointer, pointer);\r\n    }\r\n    else if (this.activePointerInput instanceof DualPointerInput) {\r\n      this.unusedPointers[pointer.pointerId] = pointer;\r\n    }\r\n\r\n    this.lastInputSessionPointerCount = this.currentPointerCount();\r\n\r\n  }\r\n\r\n  /**\r\n   * called on the following events: pointerup, pointerleave(?), pointercancel\r\n   * 1 -> 0 : SinglePointerInput -> null\r\n   * 2 -> 1 : DualPointerInput -> SinglePointerInput\r\n   * 3 -> 2 : DualPointerInput -> DualPointerInput (new combination or no change)\r\n   */\r\n  removePointer(pointerId: number): void {\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(`[PointerManager] starting to remove Pointer #${pointerId}`);\r\n      console.log(`[PointerManager] state: ${this.state}`);\r\n    }\r\n\r\n    const pointer: Pointer = this.onSurfacePointers[pointerId];\r\n    this.lastRemovedPointer = pointer;\r\n\r\n    // remove from registries\r\n    delete this.onSurfacePointers[pointerId];\r\n\r\n    if (pointerId in this.unusedPointers) {\r\n      delete this.unusedPointers[pointerId];\r\n    }\r\n\r\n    // set this.activePointerInput to null if the Pointer was part of it\r\n    // DualPointerInput -> SinglePointerInput\r\n    // OR DualPointerInput -> new DualPointerInput\r\n    if (this.activePointerInput instanceof DualPointerInput) {\r\n\r\n      if (this.activePointerInput.pointerIds.has(pointerId)) {\r\n        if (this.DEBUG == true) {\r\n          console.log(`[PointerManager] removing Pointer #${pointerId} from DualPointerInput`);\r\n        }\r\n        const remainingPointer = this.activePointerInput.removePointer(pointerId);\r\n        this.activePointerInput = null;\r\n\r\n        // remainingPointer should be used for the next this.activePointerInput\r\n        const unusedPointerInput = this.getUnusedPointer();\r\n        if (unusedPointerInput instanceof Pointer) {\r\n          this.setActiveDualPointerInput(remainingPointer, unusedPointerInput);\r\n        }\r\n        else {\r\n          this.setActiveSinglePointerInput(remainingPointer);\r\n        }\r\n\r\n      }\r\n      else {\r\n        // a 3rd pointer which has not been part of DualPointerInput has been removed\r\n      }\r\n    } else if (this.activePointerInput instanceof SinglePointerInput) {\r\n\r\n      if (this.DEBUG == true) {\r\n        console.log(`[PointerManager] removing Pointer #${pointerId} from SinglePointerInput`);\r\n      }\r\n\r\n      this.activePointerInput = null;\r\n      this.state = PointerManagerState.NoPointer;\r\n      // this should not be necessary\r\n      if (Object.keys(this.unusedPointers).length > 0) {\r\n        this.unusedPointers = {};\r\n        throw new Error(\"[PointerManager] found unused Pointers although there should not be any\");\r\n      }\r\n      if (Object.keys(this.onSurfacePointers).length > 0) {\r\n        this.onSurfacePointers = {};\r\n        throw new Error(\"[PointerManager] found onSurfacePointers although there should not be any\");\r\n      }\r\n\r\n    }\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(`[PointerManager] state: ${this.state}`);\r\n    }\r\n\r\n  }\r\n\r\n  setActiveSinglePointerInput(pointer: Pointer): void {\r\n    pointer.reset();\r\n    const singlePointerInput = new SinglePointerInput(pointer);\r\n    this.activePointerInput = singlePointerInput;\r\n\r\n    this.pointerAllocation[pointer.pointerId] = singlePointerInput;\r\n    delete this.unusedPointers[pointer.pointerId];\r\n\r\n    this.state = PointerManagerState.SinglePointer;\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(`[PointerManager] state: ${this.state}`);\r\n    }\r\n  }\r\n\r\n  setActiveDualPointerInput(pointer_1: Pointer, pointer_2: Pointer): void {\r\n    pointer_1.reset();\r\n    pointer_2.reset();\r\n    const dualPointerInput = new DualPointerInput(pointer_1, pointer_2);\r\n    this.activePointerInput = dualPointerInput;\r\n\r\n    this.pointerAllocation[pointer_1.pointerId] = dualPointerInput;\r\n    this.pointerAllocation[pointer_2.pointerId] = dualPointerInput;\r\n    delete this.unusedPointers[pointer_1.pointerId];\r\n    delete this.unusedPointers[pointer_2.pointerId];\r\n\r\n    this.state = PointerManagerState.DualPointer;\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(`[PointerManager] state: ${this.state}`);\r\n    }\r\n  }\r\n\r\n  hasPointersOnSurface(): boolean {\r\n    if (Object.keys(this.onSurfacePointers).length > 0) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  currentPointerCount(): number {\r\n    return Object.keys(this.onSurfacePointers).length;\r\n  }\r\n\r\n  getUnusedPointer(): Pointer | null {\r\n    if (Object.keys(this.unusedPointers).length > 0) {\r\n      const pointer: Pointer = Object.values(this.unusedPointers)[0];\r\n      return pointer;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getPointerFromId(pointerId: number): Pointer | null {\r\n    if (pointerId in this.onSurfacePointers) {\r\n      return this.onSurfacePointers[pointerId];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getlastRemovedPointerInput(): SinglePointerInput | DualPointerInput | null {\r\n    if (this.lastRemovedPointer instanceof Pointer) {\r\n      return this.pointerAllocation[this.lastRemovedPointer.pointerId];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onIdle(): void {\r\n    for (const pointerId in this.onSurfacePointers) {\r\n      const pointer: Pointer = this.onSurfacePointers[pointerId];\r\n      pointer.onIdle();\r\n    }\r\n\r\n    this.activePointerInput?.onIdle();\r\n\r\n  }\r\n\r\n  /**\r\n   * PointerEvent handlers\r\n   * - the Pointer is always updated firs\r\n   * - afterwards, the current activePointerInput is updated\r\n   */\r\n  onPointerMove(pointermoveEvent: PointerEvent): void {\r\n    const pointer = this.getPointerFromId(pointermoveEvent.pointerId);\r\n    if (pointer instanceof Pointer) {\r\n      pointer.onPointerMove(pointermoveEvent);\r\n    }\r\n    this.activePointerInput?.onPointerMove(pointermoveEvent);\r\n  }\r\n\r\n  onPointerUp(pointerupEvent: PointerEvent): void {\r\n    if (this.DEBUG == true) {\r\n      console.log(\"[PointerManager] pointerup detected\");\r\n    }\r\n    const pointer = this.getPointerFromId(pointerupEvent.pointerId);\r\n    if (pointer instanceof Pointer) {\r\n      pointer.onPointerUp(pointerupEvent);\r\n    }\r\n    this.activePointerInput?.onPointerUp(pointerupEvent);\r\n    this.removePointer(pointerupEvent.pointerId);\r\n  }\r\n\r\n  /*onPointerOver(pointeroverEvent: PointerEvent): void {\r\n\r\n  }\r\n\r\n  onPointerLeave(pointerleaveEvent: PointerEvent): void {\r\n    if (this.DEBUG == true) {\r\n      console.log(`[PointerManager] pointerLeave detected`);\r\n    }\r\n    const pointer = this.getPointerFromId(pointerleaveEvent.pointerId);\r\n    if (pointer instanceof Pointer) {\r\n      pointer.onPointerLeave(pointerleaveEvent);\r\n    }\r\n    this.activePointerInput?.onPointerLeave(pointerleaveEvent);\r\n    // pointerleave does not mean th pointer left the surface\r\n    // the pointer left the bound element\r\n    this.removePointer(pointerleaveEvent.pointerId);\r\n  }\r\n\r\n  onPointerOut(pointeroutEvent: PointerEvent): void {\r\n    if (this.DEBUG == true) {\r\n      console.log(`[PointerManager] pointerout detected`);\r\n    }\r\n    const pointer = this.getPointerFromId(pointeroutEvent.pointerId);\r\n    if (pointer instanceof Pointer) {\r\n      pointer.onPointerLeave(pointeroutEvent);\r\n    }\r\n    this.activePointerInput?.onPointerLeave(pointeroutEvent);\r\n    // pointerleave does not mean th pointer left the surface\r\n    // the pointer left the bound element\r\n    this.removePointer(pointeroutEvent.pointerId);\r\n  }*/\r\n\r\n  onPointerCancel(pointercancelEvent: PointerEvent): void {\r\n    if (this.DEBUG == true) {\r\n      console.log(\"[PointerManager] pointercancel detected\");\r\n    }\r\n    const pointer = this.getPointerFromId(pointercancelEvent.pointerId);\r\n    if (pointer instanceof Pointer) {\r\n      pointer.onPointerCancel(pointercancelEvent);\r\n    }\r\n    this.activePointerInput?.onPointerCancel(pointercancelEvent);\r\n    this.removePointer(pointercancelEvent.pointerId);\r\n  }\r\n\r\n}","import { Gesture } from \"./gestures/Gesture\";\r\nimport { Tap } from \"./gestures/Tap\";\r\nimport { Press } from \"./gestures/Press\";\r\nimport { Pan } from \"./gestures/Pan\";\r\nimport { Pinch } from \"./gestures/Pinch\";\r\nimport { Rotate } from \"./gestures/Rotate\";\r\nimport { TwoFingerPan } from \"./gestures/TwoFingerPan\";\r\nimport { PointerManager } from \"./PointerManager\";\r\nimport {\r\n  PointerListenerState,\r\n  GestureState,\r\n} from \"./input-consts\";\r\n\r\n/*\r\n * PointerListener class\r\n *\t- implements the possibility to listen to gesture events performed on a specific DOM Element\r\n *\t  expample: element.addEventListener(\"pan\", function(event){});\r\n *\t- creates the PointerManager instance\r\n *\t- updates the PointerManager instance\r\n *\t- uses the PointerManager instance to determine which gesture(s) are performed by passing PointerManager instances to GestureRegonizers\r\n *\r\n *\t- var listener = new PointerListener(domElement, {});\r\n *\t- domElement.addEventListener(\"pan\", function(){});\r\n */\r\n\r\n/**\r\n * pointerdownEvent ->  PointerListener.onPointerDown -> PointerManager.addPointer -> recognizeGestures (on move, idle, up, leave, cancel)\r\n * pointerupEvent -> PointerListener.onPointerUp -> PointerManager.onPointerUp -> Pointeristener.recognizeGestures\r\n */\r\n\r\ntype GestureConstructor = new (...args: ConstructorParameters<typeof Gesture>) => Gesture;\r\n\r\nconst ALL_GESTURE_CLASSES: GestureConstructor[] = [Tap, Press, Pan, Pinch, Rotate, TwoFingerPan];\r\n\r\ntype Timer = ReturnType<typeof setInterval>;\r\n\r\ninterface PointerListenerOptions {\r\n  DEBUG: boolean;\r\n  DEBUG_GESTURES: boolean;\r\n  DEBUG_POINTERMANAGER: boolean;\r\n\r\n  bubbles: boolean;\r\n  handleTouchEvents: boolean;\r\n  consecutiveGestures: boolean,\r\n  simultaneousGestures: boolean,\r\n  supportedGestures: (Gesture | GestureConstructor)[];\r\n\r\n  // Hooks\r\n  pointerdown?: (event: PointerEvent, self: PointerListener) => void;\r\n  pointermove?: (event: PointerEvent, self: PointerListener) => void;\r\n  pointerup?: (event: PointerEvent, self: PointerListener) => void;\r\n  pointercancel?: (event: PointerEvent, self: PointerListener) => void;\r\n}\r\n\r\n\r\nexport class PointerListener {\r\n  readonly options: PointerListenerOptions;\r\n  DEBUG: boolean;\r\n\r\n  private readonly domElement: HTMLElement;\r\n\r\n  private readonly gestureEventHandlers: Record<string, EventListenerOrEventListenerObject[]>;\r\n  private pointerEventHandlers: Record<string, (event: PointerEvent) => void>;\r\n  private touchEventHandlers: Record<string, (event: TouchEvent) => void>;\r\n\r\n  private pointerManager: PointerManager;\r\n\r\n  private lastRecognitionTimestamp: number | null;\r\n  private idleRecognitionIntervalId: Timer | null;\r\n\r\n  private supportedGestures: Gesture[];\r\n\r\n  state: PointerListenerState;\r\n\r\n  activeGestures: Gesture[];\r\n  private hadActiveGestureDuringCurrentContact: boolean;\r\n\r\n  constructor(domElement: HTMLElement, options?: Partial<PointerListenerOptions>) {\r\n\r\n    this.state = PointerListenerState.NoActiveGesture;\r\n    this.activeGestures = [];\r\n\r\n    this.hadActiveGestureDuringCurrentContact = false;\r\n\r\n    // registry for events like \"pan\", \"rotate\", which have to be removed on this.destroy();\r\n    this.gestureEventHandlers = {};\r\n\r\n    this.lastRecognitionTimestamp = null;\r\n    this.idleRecognitionIntervalId = null;\r\n\r\n    this.pointerEventHandlers = {};\r\n    this.touchEventHandlers = {};\r\n\r\n    options = options || {};\r\n\r\n    this.options = {\r\n      DEBUG: false,\r\n      DEBUG_GESTURES: false,\r\n      DEBUG_POINTERMANAGER: false,\r\n      bubbles: true,\r\n      handleTouchEvents: true,\r\n      consecutiveGestures: true,\r\n      simultaneousGestures: true,\r\n      supportedGestures: [],\r\n      ...options\r\n    };\r\n\r\n    this.DEBUG = this.options.DEBUG;\r\n\r\n    const supportedGestures = options.supportedGestures ?? ALL_GESTURE_CLASSES;\r\n\r\n    // instantiate gesture classes on domElement and add them to this.options\r\n    const instantiatedGestures = supportedGestures.map(GestureClass => {\r\n      if (typeof GestureClass === \"function\") {\r\n        const gestureOptions = {\r\n          bubbles: this.options.bubbles,\r\n          DEBUG: this.options.DEBUG_GESTURES,\r\n        };\r\n\r\n        return new GestureClass(domElement, gestureOptions);\r\n      }\r\n\r\n      if (typeof GestureClass === \"object\") {\r\n        return GestureClass;\r\n      }\r\n\r\n      throw new Error(`unsupported gesture type: ${typeof GestureClass}`);\r\n    });\r\n\r\n    // this.supportedGestures have to be instantiated gestures\r\n    this.supportedGestures = instantiatedGestures;\r\n\r\n    this.domElement = domElement;\r\n\r\n    const pointerManagerOptions = {\r\n      DEBUG: this.options.DEBUG_POINTERMANAGER,\r\n    };\r\n    this.pointerManager = new PointerManager(pointerManagerOptions);\r\n\r\n    // disable context menu on long taps - this kills pointermove\r\n    /*domElement.addEventListener(\"contextmenu\", (event) => {\r\n      event.preventDefault();\r\n      return false;\r\n    });*/\r\n\r\n    this.addPointerEventListeners();\r\n\r\n    this.addTouchEventListeners();\r\n\r\n  }\r\n\r\n  /* PointerEvent handling */\r\n  private addPointerEventListeners(): void {\r\n\r\n    const domElement = this.domElement;\r\n\r\n    // create references, so the listener can be removed at a later time\r\n    // .bind(this): make sure that the instance of PointerListener is accessible in the EventHandler\r\n    const onPointerDown = this.onPointerDown.bind(this);\r\n    const onPointerMove = this.onPointerMove.bind(this);\r\n    const onPointerUp = this.onPointerUp.bind(this);\r\n    //const onPointerLeave = this.onPointerLeave.bind(this);\r\n    //const onPointerOut = this.onPointerOut.bind(this);\r\n    const onPointerCancel = this.onPointerCancel.bind(this);\r\n\r\n    domElement.addEventListener(\"pointerdown\", onPointerDown, { passive: true });\r\n    domElement.addEventListener(\"pointermove\", onPointerMove, { passive: true });\r\n    domElement.addEventListener(\"pointerup\", onPointerUp, { passive: true });\r\n    /*\r\n     * case: user presses mouse button and moves element. while moving, the cursor leaves the element (fires pointerout)\r\n     *\t\twhile outside the element, the mouse button is released. pointerup is not fired.\r\n     *\t\tduring pan, pan should not end if the pointer leaves the element.\r\n     * MDN: Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal (or hit test) target at a pointer's location. This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element (such as by scrolling or panning).\r\n     *  this problem is solved by using setPointerCapture()\r\n     */\r\n    //domElement.addEventListener(\"pointerleave\", onPointerLeave, { passive: true });\r\n    //domElement.addEventListener(\"pointerout\", onPointerOut, { passive: true });\r\n    domElement.addEventListener(\"pointercancel\", onPointerCancel, { passive: true });\r\n\r\n    this.pointerEventHandlers = {\r\n      pointerdown: onPointerDown,\r\n      pointermove: onPointerMove,\r\n      pointerup: onPointerUp,\r\n      //pointerleave: onPointerLeave,\r\n      //pointerout: onPointerOut,\r\n      pointercancel: onPointerCancel,\r\n    };\r\n\r\n  }\r\n\r\n  // there may be more than one pointer. Each new pointer fires onPointerDown\r\n  private onPointerDown(pointerdownEvent: PointerEvent) {\r\n    if (this.DEBUG == true) {\r\n      console.log(\"[PointerListener] pointerdown event detected\");\r\n    }\r\n\r\n    // re-target all pointerevents to the current element\r\n    // see https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture\r\n    // setPointerCapture on pointerdownEvent.target to not disable native click events on elements inside of the element pointerListener is bound to\r\n    (pointerdownEvent.target as HTMLElement || this.domElement).setPointerCapture(pointerdownEvent.pointerId);\r\n\r\n    this.pointerManager.addPointer(pointerdownEvent);\r\n\r\n    this.options.pointerdown?.(pointerdownEvent, this);\r\n\r\n    // before starting a new interval, make sure the old one is stopped if present\r\n    if (this.idleRecognitionIntervalId != null) {\r\n      this.clearIdleRecognitionInterval();\r\n    }\r\n\r\n    this.idleRecognitionIntervalId = setInterval(() => {\r\n      this.onIdle();\r\n    }, 100);\r\n  }\r\n\r\n  private onPointerMove(pointermoveEvent: PointerEvent) {\r\n    // pointermove is also firing if the mouse button is not pressed\r\n\r\n    if (this.pointerManager.hasPointersOnSurface() == true) {\r\n      // this would disable vertical scrolling - which should only be disabled if a panup/down or swipeup/down listener has been triggered\r\n      // event.preventDefault();\r\n\r\n      this.pointerManager.onPointerMove(pointermoveEvent);\r\n      this.recognizeGestures();\r\n\r\n      this.options.pointermove?.(pointermoveEvent, this);\r\n    }\r\n  }\r\n\r\n  private onPointerUp(pointerupEvent: PointerEvent) {\r\n    if (this.DEBUG == true) {\r\n      console.log(\"[PointerListener] pointerup event detected\");\r\n    }\r\n\r\n    this.domElement.releasePointerCapture(pointerupEvent.pointerId);\r\n\r\n    if (this.pointerManager.hasPointersOnSurface() == true) {\r\n\r\n      this.pointerManager.onPointerUp(pointerupEvent);\r\n      this.recognizeGestures();\r\n\r\n      this.options.pointerup?.(pointerupEvent, this);\r\n    }\r\n\r\n    this.clearIdleRecognitionInterval();\r\n  }\r\n\r\n  /*private onPointerLeave(event: PointerEvent) {\r\n    if (this.DEBUG == true) {\r\n      console.log(\"[PointerListener] pointerleave detected\");\r\n    }\r\n\r\n    if (this.pointerManager.hasPointersOnSurface() == true) {\r\n      this.pointerManager.onPointerLeave(event);\r\n      this.recognizeGestures();\r\n    }\r\n\r\n    this.clearIdleRecognitionInterval();\r\n  }\r\n\r\n  private onPointerOut(pointeroutEvent: PointerEvent) {\r\n    if (this.DEBUG == true) {\r\n      console.log(\"[PointerListener] pointerout detected\");\r\n    }\r\n\r\n    if (this.pointerManager.hasPointersOnSurface() == true) {\r\n      this.pointerManager.onPointerOut(pointeroutEvent);\r\n      this.recognizeGestures();\r\n    }\r\n\r\n    this.clearIdleRecognitionInterval();\r\n  }*/\r\n\r\n  private onPointerCancel(pointercancelEvent: PointerEvent) {\r\n    this.domElement.releasePointerCapture(pointercancelEvent.pointerId);\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(\"[PointerListener] pointercancel detected\");\r\n    }\r\n\r\n    this.pointerManager.onPointerCancel(pointercancelEvent);\r\n    this.recognizeGestures();\r\n\r\n    this.clearIdleRecognitionInterval();\r\n\r\n    this.options.pointercancel?.(pointercancelEvent, this);\r\n  }\r\n\r\n  public removePointerEventListeners(): void {\r\n    for (const event in this.pointerEventHandlers) {\r\n      const handler = this.pointerEventHandlers[event];\r\n      this.domElement.removeEventListener(event, handler as EventListener);\r\n    }\r\n  }\r\n\r\n  // provide the ability to interact/prevent touch events\r\n  // scrolling (touchmove event) results in pointerCancel event, stopping horizontal panning if user scrolls vertically\r\n  // the better solution is using eg css: touch-action: pan-y;\r\n  addTouchEventListeners(): void {\r\n    if (this.options.handleTouchEvents == true) {\r\n\r\n      const onTouchMove = this.onTouchMove.bind(this);\r\n\r\n      // do NOT make the touchmove listener passive, as this listener might block touch events from\r\n      // interfering with pan/swipe. Passive listeners make the promise not to block scrolling.\r\n      this.domElement.addEventListener(\"touchmove\", onTouchMove);\r\n\r\n      this.touchEventHandlers[\"touchmove\"] = onTouchMove;\r\n\r\n      /*this.domElement.addEventListener(\"touchstart\", (event) => {\r\n\r\n      }, { passive: true });*/\r\n\r\n      /*this.domElement.addEventListener(\"touchend\", (event) => {\r\n      }, { passive: true });\r\n\r\n      this.domElement.addEventListener(\"touchcancel\", (event) => {\r\n      }, { passive: true });*/\r\n    }\r\n  }\r\n\r\n  removeTouchEventListeners(): void {\r\n    for (const event in this.touchEventHandlers) {\r\n      const handler = this.touchEventHandlers[event];\r\n      this.domElement.removeEventListener(event, handler as EventListener);\r\n    }\r\n  }\r\n\r\n  private onTouchMove(event: TouchEvent): void {\r\n    // fire onTouchMove for all gestures\r\n    for (let g = 0; g < this.supportedGestures.length; g++) {\r\n      const gesture = this.supportedGestures[g];\r\n\r\n      gesture.onTouchMove(event);\r\n    }\r\n  }\r\n\r\n\r\n  // to recognize Press, recognition has to be run if the user does nothing while having contact with the surface (no pointermove, no pointerup, no pointercancel)\r\n  private onIdle(): void {\r\n    if (this.pointerManager.hasPointersOnSurface() == false) {\r\n      this.clearIdleRecognitionInterval();\r\n    } else {\r\n      const now = new Date().getTime();\r\n      let timedelta = null;\r\n\r\n      if (this.lastRecognitionTimestamp != null) {\r\n        timedelta = now - this.lastRecognitionTimestamp;\r\n      }\r\n\r\n      if (timedelta == null || timedelta > 100) {\r\n        this.pointerManager.onIdle();\r\n\r\n        if (this.DEBUG == true) {\r\n          console.log(\"[PointerListener] onIdle - running idle recognition\");\r\n        }\r\n\r\n        this.recognizeGestures();\r\n      }\r\n    }\r\n  }\r\n\r\n  private clearIdleRecognitionInterval(): void {\r\n    if (this.idleRecognitionIntervalId != null) {\r\n      clearInterval(this.idleRecognitionIntervalId);\r\n      this.idleRecognitionIntervalId = null;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * respect the options \"consecutiveGestures\" and \"simultaneousGestures\"\r\n   */\r\n  private recognizeGestures(): void {\r\n\r\n    this.lastRecognitionTimestamp = new Date().getTime();\r\n\r\n    let gesturesForRecognition: Gesture[] = this.supportedGestures;\r\n\r\n    if ( this.options.simultaneousGestures == false && this.state == PointerListenerState.ActiveGesture){\r\n      gesturesForRecognition = [this.activeGestures[0]];\r\n    }\r\n    else if ( this.options.consecutiveGestures == false && this.state == PointerListenerState.ActiveGesture) {\r\n      gesturesForRecognition = [this.activeGestures[0]];\r\n    }\r\n    else if (this.options.consecutiveGestures == false && this.state == PointerListenerState.NoActiveGesture) {\r\n      if (this.hadActiveGestureDuringCurrentContact == true && this.pointerManager.hasPointersOnSurface() == true){\r\n        gesturesForRecognition = [];\r\n      }\r\n    }\r\n\r\n    for (let g = 0; g < gesturesForRecognition.length; g++) {\r\n      const gesture = gesturesForRecognition[g];\r\n\r\n      gesture.recognize(this.pointerManager);\r\n\r\n      this.updateActiveGestures(gesture);\r\n\r\n      if (this.options.simultaneousGestures == false && this.state == PointerListenerState.ActiveGesture){\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (this.DEBUG == true){\r\n      console.log(\r\n        `[PointerListener] hadActiveGestureDuringCurrentContact: ${this.hadActiveGestureDuringCurrentContact}`\r\n      );\r\n    }\r\n\r\n    if (this.pointerManager.hasPointersOnSurface() == false){\r\n      this.hadActiveGestureDuringCurrentContact = false;\r\n    }\r\n\r\n  }\r\n\r\n  updateActiveGestures(gesture: Gesture): void {\r\n    if (gesture.state == GestureState.Active) {\r\n\r\n      this.hadActiveGestureDuringCurrentContact = true;\r\n\r\n      if (this.activeGestures.indexOf(gesture) < 0) {\r\n        this.activeGestures.push(gesture);\r\n      }\r\n    }\r\n    else {\r\n      // remove from active gestures\r\n      const index = this.activeGestures.indexOf(gesture);\r\n      if (index >= 0) {\r\n        this.activeGestures.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    if (this.activeGestures.length > 0) {\r\n      this.state = PointerListenerState.ActiveGesture;\r\n    } else {\r\n      this.state = PointerListenerState.NoActiveGesture;\r\n    }\r\n\r\n  }\r\n\r\n  /*\r\n   *\thandler management\r\n   *\teventsString: one or more events: \"tap\" or \"pan twofingerpan pinchend\"\r\n   *\tcurrently, it is not supported to add the same handlerReference twice (once with useCapture = true, and once with useCapture = false)\r\n   *\tuseCapture defaults to false\r\n   */\r\n  private parseEventsString(eventsString: string): string[] {\r\n    return eventsString.trim().split(/\\s+/g);\r\n  }\r\n\r\n  on(eventsString: string, handlerReference: EventListenerOrEventListenerObject): void {\r\n    const eventTypes = this.parseEventsString(eventsString);\r\n\r\n    for (let e = 0; e < eventTypes.length; e++) {\r\n      const eventType = eventTypes[e];\r\n\r\n      if (!(eventType in this.gestureEventHandlers)) {\r\n        this.gestureEventHandlers[eventType] = [];\r\n      }\r\n\r\n      if (this.gestureEventHandlers[eventType].indexOf(handlerReference) == -1) {\r\n        this.gestureEventHandlers[eventType].push(handlerReference);\r\n      }\r\n\r\n      this.domElement.addEventListener(eventType, handlerReference, { capture: false, passive: true });\r\n    }\r\n  }\r\n\r\n  off(eventsString: string, handlerReference: EventListenerOrEventListenerObject): void {\r\n\r\n    const eventTypes = this.parseEventsString(eventsString);\r\n\r\n    if (this.DEBUG == true) {\r\n      console.log(\r\n        `[PointerListener] turning off events: ${eventsString}`\r\n      );\r\n      console.log(this.gestureEventHandlers);\r\n    }\r\n\r\n    for (let e = 0; e < eventTypes.length; e++) {\r\n      const eventType = eventTypes[e];\r\n\r\n      if (eventType in this.gestureEventHandlers) {\r\n\r\n        const handlerList = this.gestureEventHandlers[eventType];\r\n        const index = handlerList.indexOf(handlerReference);\r\n\r\n        if (this.DEBUG == true) {\r\n          console.log(\r\n            `[PointerListener] turning off ${eventType}. Index on handlerList: ${index}`\r\n          );\r\n        }\r\n\r\n        if (index >= 0) {\r\n          handlerList.splice(index, 1);\r\n\r\n          this.gestureEventHandlers[eventType] = handlerList;\r\n        }\r\n\r\n        this.domElement.removeEventListener(eventType, handlerReference, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  destroy(): void {\r\n    // remove all EventListeners from this.domElement\r\n    for (const eventType in this.gestureEventHandlers) {\r\n      const handlerList = this.gestureEventHandlers[eventType];\r\n      for (let h = 0; h < handlerList.length; h++) {\r\n        const handler = handlerList[h];\r\n        this.domElement.removeEventListener(eventType, handler);\r\n      }\r\n\r\n      delete this.gestureEventHandlers[eventType];\r\n    }\r\n\r\n    this.removePointerEventListeners();\r\n    this.removeTouchEventListeners();\r\n  }\r\n\r\n}\r\n"],"names":["$a679181e97da1d47$export$cacd6541cfeeb6c1","Direction","$a679181e97da1d47$export$86ae6e8ac17a67c6","Object","freeze","Horizontal","Left","Right","Vertical","Up","Down","All","None","$a679181e97da1d47$export$a1d3109c03b1d511","GestureState","$a679181e97da1d47$export$b8339a9622c147c0","PointerManagerState","$a679181e97da1d47$export$2fb579dd5dfdbea","PointerListenerState","$371e257a8f59ebbd$export$baf26146a414f24a","constructor","x","y","this","$c0a0a4849382239c$export$9b781de7bf37bf48","startPoint","endPoint","direction","deltaX","deltaY","vectorLength","Math","sqrt","pow","abs","$9892efb410352ab9$export$2db6c17465f94a2","static","startPointerEvent","endPointerEvent","clientX","clientY","vector","startTimestamp","endTimestamp","speed","timespan_s","vector_1","vector_2","angleVector_1","angleVector_2","origin","translationVector_1","translatedEndPoint_1","translatePoint","translationVector_2","translatedEndPoint_2","rotationAngle","calcAngleRad","x_2_rotated","cos","sin","y_2_rotated","round","atan2","PI","angleDeg","angleRad","acos","rad2deg","point","newX","newY","angle","pointA","pointB","centerX","centerY","$e5661809384330e7$export$573b9b62d5ae28f7","PointerState","$e5661809384330e7$export$b56007f12edf0c17","pointerEvent","options","DEBUG","now","Date","getTime","pointerId","vectorTimespan","initialPointerEvent","currentPointerEvent","recognizedEvents","state","Active","nullVector","getVector","parameters","global","startX","startY","startTimestampUTC","timeStamp","currentTimestamp","maximumSpeed","currentSpeed","distance","maximumDistance","averageSpeed","finalSpeed","traveledDistance","hasBeenMoved","duration","live","isMoving","getTarget","target","reset","onIdle","onPointerMove","pointermoveEvent","update","onPointerUp","pointerupEvent","Removed","console","log","onPointerLeave","pointerleaveEvent","onPointerCancel","pointercancelEvent","Canceled","push","timedPointerEvents","getTimedPointerEvents","liveVector","getSpeed","globalVector","length","startIndex","elapsedTime","endTimeStamp","pointerEvents","slice","$e24396531d1264aa$export$bbcc47898202c6b8","pointer","getCurrentPointerEvent","getCurrentDirection","$41395fc88ae831c8$var$window","globalThis","$41395fc88ae831c8$export$9d2aa32114ab0612","CustomEvent","Event","type","eventInitDict","super","detail","initCustomEvent","Error","$2c17106273202fe9$export$6e9c3b1e1fa2b597","$2c17106273202fe9$export$61ce360501d38a6f","domElement","Inactive","validPointerManagerState","validPointerInputConstructor","initialParameters","activeStateParameters","bubbles","blocks","supportedDirections","supportedButtons","getEmptyGestureParameters","min","max","boolean","getGestureParameters","gestureParameters","eventBaseName","validateGestureParameters","pointerInput","timespan","isValid","timedGestureParameters","timedPointerInputValues","minOrMaxOrBoolean","evaluationParameters","gestureParameterName","gestureParameter","pointerInputValue","validateBooleanParameter","validateMinMaxParameter","minOrMax","validateDirection","currentDirection","includes","validateGestureState","Blocked","validatePointerManagerState","pointerManager","validatePointerInputConstructor","validate","activePointerInput","recognize","onStart","setInitialPointerEvent","emit","onEnd","hasPointersOnSurface","lastRemovedPointer","getlastRemovedPointerInput","getPointerInput","eventName","EventTarget","eventData","getEventData","eventOptions","event","dispatchEvent","d","directionEventName","directionEvent","blockGestures","unblockGestures","onTouchStart","onTouchMove","onTouchEnd","block","gesture","indexOf","splice","g","$1601fa93fc399afe$export$718b85c80185d86e","SinglePointer","nullRecognitionParameters","JSON","parse","stringify","singlePointerInput","globalParameters","liveParameters","globalDuration","globalStartPoint","globalEndPoint","recognizer","speedX","speedY","scale","rotation","center","srcEvent","pointerType","buttons","toString","$6dba6490e7c85df8$export$4451a18ddc7083b7","NoPointer","globalMaxDuration","liveMaxDistance","globalMaxDistance","validateButton","button","lastInputSessionPointerCount","$f829e854c7d609ac$export$90610caf6d8d0242","globalMinDuration","globalMaxMaximumDistance","hasBeenEmitted","minDuration","$5a17d735ab76ec40$export$f86166cd6057c2d1","swipeFinalSpeed","isSwipe","initialSupportedDirections","stopPropagation","$cb43891ac9a613e2$export$bdba51b3ce92d5f1","pointer_1","pointer_2","pointerIds","Set","pointerMap","globalVector_1","globalVector_2","getCenter","centerHasBeenMoved","centerMovementDistance","centerMovementVector","getCenterMovementVector","absolutePointerDistanceChange","relativePointerDistanceChange","absoluteRotationAngle","vectorAngle","absoluteVectorAngle","liveVector_1","liveVector_2","centerIsMoving","removePointer","PointerEvent","globalCenter","globalCenterMovementVector","globalAbsoluteDistanceChange","calculateAbsoluteDistanceChange","globalRelativeDistanceChange","calculateRelativeDistanceChange","globalRotationAngle","calculateRotationAngle","globalVectorAngle","calculateVectorAngle","liveCenter","liveCenterMovementVector","liveAbsoluteDistanceChange","liveRelativeDistanceChange","liveRotationAngle","liveVectorAngle","$14d126af10d3d05a$export$f9d89efe4b7795e7","initialPointerEvent_1","initialPointerEvent_2","DualPointer","dualPointerInput","$df61fd58f18efccc$export$826ae541ddf1527b","$0fe9ad3b38405eae$export$152db69a76b6b79e","$6a2d57fd78e9a215$export$8847187e02a498e8","$7d1514273ccb6867$export$af6d1be017a420a","pointerAllocation","unusedPointers","onSurfacePointers","addPointer","pointerdownEvent","pointerOptions","setActiveSinglePointerInput","setActiveDualPointerInput","currentPointerCount","has","remainingPointer","unusedPointerInput","getUnusedPointer","keys","values","getPointerFromId","$2cb62bc01322d9ff$var$ALL_GESTURE_CLASSES","$2cb62bc01322d9ff$export$9371bd96776f4e82","NoActiveGesture","activeGestures","hadActiveGestureDuringCurrentContact","gestureEventHandlers","lastRecognitionTimestamp","idleRecognitionIntervalId","pointerEventHandlers","touchEventHandlers","DEBUG_GESTURES","DEBUG_POINTERMANAGER","handleTouchEvents","consecutiveGestures","simultaneousGestures","supportedGestures","instantiatedGestures","map","GestureClass","gestureOptions","pointerManagerOptions","addPointerEventListeners","addTouchEventListeners","onPointerDown","bind","addEventListener","passive","pointerdown","pointermove","pointerup","pointercancel","setPointerCapture","clearIdleRecognitionInterval","setInterval","recognizeGestures","releasePointerCapture","handler","removeEventListener","timedelta","clearInterval","ActiveGesture","gesturesForRecognition","updateActiveGestures","index","eventsString","trim","split"],"version":3,"file":"index.js.map"}